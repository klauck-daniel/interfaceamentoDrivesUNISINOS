
20230408_spi_display_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c8  080030c8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080030c8  080030c8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030c8  080030c8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080030d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000080  08003150  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08003150  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005baa  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000146d  00000000  00000000  00025c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000678  00000000  00000000  000270c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c0  00000000  00000000  00027738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b21  00000000  00000000  00027cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007373  00000000  00000000  0003e819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080fb6  00000000  00000000  00045b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6b42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c74  00000000  00000000  000c6b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d40 	.word	0x08002d40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08002d40 	.word	0x08002d40

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 ffde 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 fba2 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fc48 	bl	80009ec <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 fbda 	bl	8000914 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000160:	f000 fc0e 	bl	8000980 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  LCD1_Init();
 8000164:	f000 fdb2 	bl	8000ccc <LCD1_Init>
  LCD1_Write_String(0,0,"AdvnhAi PLYR 1");
 8000168:	4a6f      	ldr	r2, [pc, #444]	; (8000328 <main+0x1dc>)
 800016a:	2100      	movs	r1, #0
 800016c:	2000      	movs	r0, #0
 800016e:	f000 fec1 	bl	8000ef4 <LCD1_Write_String>

  LCD2_Init();
 8000172:	f000 fdbf 	bl	8000cf4 <LCD2_Init>
  LCD2_Write_String(0,0,"AdvnhAi PLYR 2");
 8000176:	4a6d      	ldr	r2, [pc, #436]	; (800032c <main+0x1e0>)
 8000178:	2100      	movs	r1, #0
 800017a:	2000      	movs	r0, #0
 800017c:	f000 feda 	bl	8000f34 <LCD2_Write_String>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)) {
 8000180:	2101      	movs	r1, #1
 8000182:	486b      	ldr	r0, [pc, #428]	; (8000330 <main+0x1e4>)
 8000184:	f001 fab2 	bl	80016ec <HAL_GPIO_ReadPin>
 8000188:	4603      	mov	r3, r0
 800018a:	2b00      	cmp	r3, #0
 800018c:	d003      	beq.n	8000196 <main+0x4a>
		  B0 = 1;
 800018e:	4b69      	ldr	r3, [pc, #420]	; (8000334 <main+0x1e8>)
 8000190:	2201      	movs	r2, #1
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	e002      	b.n	800019c <main+0x50>
	  } else {
		  B0 = 0;
 8000196:	4b67      	ldr	r3, [pc, #412]	; (8000334 <main+0x1e8>)
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
	  }

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)) {
 800019c:	2102      	movs	r1, #2
 800019e:	4864      	ldr	r0, [pc, #400]	; (8000330 <main+0x1e4>)
 80001a0:	f001 faa4 	bl	80016ec <HAL_GPIO_ReadPin>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d003      	beq.n	80001b2 <main+0x66>
		  B1 = 1;
 80001aa:	4b63      	ldr	r3, [pc, #396]	; (8000338 <main+0x1ec>)
 80001ac:	2201      	movs	r2, #1
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	e002      	b.n	80001b8 <main+0x6c>
	  } else {
		  B1 = 0;
 80001b2:	4b61      	ldr	r3, [pc, #388]	; (8000338 <main+0x1ec>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	601a      	str	r2, [r3, #0]
	  }

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 80001b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001bc:	485c      	ldr	r0, [pc, #368]	; (8000330 <main+0x1e4>)
 80001be:	f001 fa95 	bl	80016ec <HAL_GPIO_ReadPin>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d003      	beq.n	80001d0 <main+0x84>
		  B8 = 1;
 80001c8:	4b5c      	ldr	r3, [pc, #368]	; (800033c <main+0x1f0>)
 80001ca:	2201      	movs	r2, #1
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	e002      	b.n	80001d6 <main+0x8a>
	  } else {
		  B8 = 0;
 80001d0:	4b5a      	ldr	r3, [pc, #360]	; (800033c <main+0x1f0>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
	  }

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)) {
 80001d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001da:	4855      	ldr	r0, [pc, #340]	; (8000330 <main+0x1e4>)
 80001dc:	f001 fa86 	bl	80016ec <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d003      	beq.n	80001ee <main+0xa2>
		  B9 = 1;
 80001e6:	4b56      	ldr	r3, [pc, #344]	; (8000340 <main+0x1f4>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	e002      	b.n	80001f4 <main+0xa8>
	  } else {
		  B9 = 0;
 80001ee:	4b54      	ldr	r3, [pc, #336]	; (8000340 <main+0x1f4>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
	  }



	  if(jogada == 1){
 80001f4:	4b53      	ldr	r3, [pc, #332]	; (8000344 <main+0x1f8>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	f040 818f 	bne.w	800051c <main+0x3d0>

		  if(ply_configura == 1){
 80001fe:	4b52      	ldr	r3, [pc, #328]	; (8000348 <main+0x1fc>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b01      	cmp	r3, #1
 8000204:	d145      	bne.n	8000292 <main+0x146>

		  		  LCD1_Write_String(0,1,"ESCOLHENDO:");
 8000206:	4a51      	ldr	r2, [pc, #324]	; (800034c <main+0x200>)
 8000208:	2101      	movs	r1, #1
 800020a:	2000      	movs	r0, #0
 800020c:	f000 fe72 	bl	8000ef4 <LCD1_Write_String>
		  		  LCD1_Write_String(0,3,"Escolhe e OK:");
 8000210:	4a4f      	ldr	r2, [pc, #316]	; (8000350 <main+0x204>)
 8000212:	2103      	movs	r1, #3
 8000214:	2000      	movs	r0, #0
 8000216:	f000 fe6d 	bl	8000ef4 <LCD1_Write_String>

		  		  if(B0 == 0){
 800021a:	4b46      	ldr	r3, [pc, #280]	; (8000334 <main+0x1e8>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d126      	bne.n	8000270 <main+0x124>
		  			  if(B1 == 1){
 8000222:	4b45      	ldr	r3, [pc, #276]	; (8000338 <main+0x1ec>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d11f      	bne.n	800026a <main+0x11e>
		  				  if(n_configura < range){
 800022a:	4b4a      	ldr	r3, [pc, #296]	; (8000354 <main+0x208>)
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	4b4a      	ldr	r3, [pc, #296]	; (8000358 <main+0x20c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	429a      	cmp	r2, r3
 8000234:	da05      	bge.n	8000242 <main+0xf6>
		  					  n_configura++;//faz a leitura e quando apertar ok finaliza
 8000236:	4b47      	ldr	r3, [pc, #284]	; (8000354 <main+0x208>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	3301      	adds	r3, #1
 800023c:	4a45      	ldr	r2, [pc, #276]	; (8000354 <main+0x208>)
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	e007      	b.n	8000252 <main+0x106>
		  				  }
		  				  else{
		  					  n_configura = 0;
 8000242:	4b44      	ldr	r3, [pc, #272]	; (8000354 <main+0x208>)
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
		  					  LCD1_Write_String(3,4,"                   " );
 8000248:	4a44      	ldr	r2, [pc, #272]	; (800035c <main+0x210>)
 800024a:	2104      	movs	r1, #4
 800024c:	2003      	movs	r0, #3
 800024e:	f000 fe51 	bl	8000ef4 <LCD1_Write_String>
		  				  }
		  				  sprintf(stringBuffer,"Numero: %d", n_configura);
 8000252:	4b40      	ldr	r3, [pc, #256]	; (8000354 <main+0x208>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	461a      	mov	r2, r3
 8000258:	4941      	ldr	r1, [pc, #260]	; (8000360 <main+0x214>)
 800025a:	4842      	ldr	r0, [pc, #264]	; (8000364 <main+0x218>)
 800025c:	f002 f8f6 	bl	800244c <siprintf>
		  				  LCD1_Write_String(3,4, stringBuffer );
 8000260:	4a40      	ldr	r2, [pc, #256]	; (8000364 <main+0x218>)
 8000262:	2104      	movs	r1, #4
 8000264:	2003      	movs	r0, #3
 8000266:	f000 fe45 	bl	8000ef4 <LCD1_Write_String>
		  			  }
		  			  HAL_Delay(100);
 800026a:	2064      	movs	r0, #100	; 0x64
 800026c:	f000 ffb2 	bl	80011d4 <HAL_Delay>
		  		  }
		  		  if(B0 == 1){
 8000270:	4b30      	ldr	r3, [pc, #192]	; (8000334 <main+0x1e8>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d10c      	bne.n	8000292 <main+0x146>
		  			  ply1_ok = true;
 8000278:	4b3b      	ldr	r3, [pc, #236]	; (8000368 <main+0x21c>)
 800027a:	2201      	movs	r2, #1
 800027c:	701a      	strb	r2, [r3, #0]
		  			  ply_configura = 2;
 800027e:	4b32      	ldr	r3, [pc, #200]	; (8000348 <main+0x1fc>)
 8000280:	2202      	movs	r2, #2
 8000282:	601a      	str	r2, [r3, #0]
		  			  B0 = 0;
 8000284:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <main+0x1e8>)
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
		  			  HAL_Delay(1000);
 800028a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800028e:	f000 ffa1 	bl	80011d4 <HAL_Delay>
		  		  }
		  	  }

		  	  if (ply1_ok == true){
 8000292:	4b35      	ldr	r3, [pc, #212]	; (8000368 <main+0x21c>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d024      	beq.n	80002e4 <main+0x198>
		  		  LCD1_Write_String(0,3, "                        " );
 800029a:	4a34      	ldr	r2, [pc, #208]	; (800036c <main+0x220>)
 800029c:	2103      	movs	r1, #3
 800029e:	2000      	movs	r0, #0
 80002a0:	f000 fe28 	bl	8000ef4 <LCD1_Write_String>
		  		  LCD1_Write_String(0,4, "                        " );
 80002a4:	4a31      	ldr	r2, [pc, #196]	; (800036c <main+0x220>)
 80002a6:	2104      	movs	r1, #4
 80002a8:	2000      	movs	r0, #0
 80002aa:	f000 fe23 	bl	8000ef4 <LCD1_Write_String>

		  		  HAL_Delay(100);
 80002ae:	2064      	movs	r0, #100	; 0x64
 80002b0:	f000 ff90 	bl	80011d4 <HAL_Delay>

		  		  sprintf(stringBuffer,"Escolhido: %d", n_configura);
 80002b4:	4b27      	ldr	r3, [pc, #156]	; (8000354 <main+0x208>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	461a      	mov	r2, r3
 80002ba:	492d      	ldr	r1, [pc, #180]	; (8000370 <main+0x224>)
 80002bc:	4829      	ldr	r0, [pc, #164]	; (8000364 <main+0x218>)
 80002be:	f002 f8c5 	bl	800244c <siprintf>
		  		  LCD1_Write_String(0,4, stringBuffer );
 80002c2:	4a28      	ldr	r2, [pc, #160]	; (8000364 <main+0x218>)
 80002c4:	2104      	movs	r1, #4
 80002c6:	2000      	movs	r0, #0
 80002c8:	f000 fe14 	bl	8000ef4 <LCD1_Write_String>

		  		  HAL_Delay(1000);
 80002cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d0:	f000 ff80 	bl	80011d4 <HAL_Delay>

		  		  ply1_ok = false;
 80002d4:	4b24      	ldr	r3, [pc, #144]	; (8000368 <main+0x21c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
		  		  compara = compara + 1; //controle para executar a comparação dos valores escolhidos pelos players
 80002da:	4b26      	ldr	r3, [pc, #152]	; (8000374 <main+0x228>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	4a24      	ldr	r2, [pc, #144]	; (8000374 <main+0x228>)
 80002e2:	6013      	str	r3, [r2, #0]

		  	  }

		  	  if(ply_adivinha == 2){
 80002e4:	4b24      	ldr	r3, [pc, #144]	; (8000378 <main+0x22c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	d173      	bne.n	80003d4 <main+0x288>
		  		  LCD2_Write_String(0,1,"ADIVINHANDO");
 80002ec:	4a23      	ldr	r2, [pc, #140]	; (800037c <main+0x230>)
 80002ee:	2101      	movs	r1, #1
 80002f0:	2000      	movs	r0, #0
 80002f2:	f000 fe1f 	bl	8000f34 <LCD2_Write_String>
		  		  LCD2_Write_String(0,3,"Escolhe e OK:");
 80002f6:	4a16      	ldr	r2, [pc, #88]	; (8000350 <main+0x204>)
 80002f8:	2103      	movs	r1, #3
 80002fa:	2000      	movs	r0, #0
 80002fc:	f000 fe1a 	bl	8000f34 <LCD2_Write_String>

		  		  if(B8 == 0){
 8000300:	4b0e      	ldr	r3, [pc, #56]	; (800033c <main+0x1f0>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d154      	bne.n	80003b2 <main+0x266>
		  		  			  if(B9 == 1){
 8000308:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <main+0x1f4>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d14d      	bne.n	80003ac <main+0x260>
		  		  				  if(n_adivinha < range){
 8000310:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <main+0x234>)
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	4b10      	ldr	r3, [pc, #64]	; (8000358 <main+0x20c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	429a      	cmp	r2, r3
 800031a:	da33      	bge.n	8000384 <main+0x238>
		  		  					n_adivinha++;//faz a leitura e quando apertar ok finaliza
 800031c:	4b18      	ldr	r3, [pc, #96]	; (8000380 <main+0x234>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	3301      	adds	r3, #1
 8000322:	4a17      	ldr	r2, [pc, #92]	; (8000380 <main+0x234>)
 8000324:	6013      	str	r3, [r2, #0]
 8000326:	e035      	b.n	8000394 <main+0x248>
 8000328:	08002d58 	.word	0x08002d58
 800032c:	08002d68 	.word	0x08002d68
 8000330:	40010c00 	.word	0x40010c00
 8000334:	20000180 	.word	0x20000180
 8000338:	20000184 	.word	0x20000184
 800033c:	20000188 	.word	0x20000188
 8000340:	2000018c 	.word	0x2000018c
 8000344:	20000008 	.word	0x20000008
 8000348:	20000000 	.word	0x20000000
 800034c:	08002d78 	.word	0x08002d78
 8000350:	08002d84 	.word	0x08002d84
 8000354:	20000194 	.word	0x20000194
 8000358:	2000000c 	.word	0x2000000c
 800035c:	08002d94 	.word	0x08002d94
 8000360:	08002da8 	.word	0x08002da8
 8000364:	2000009c 	.word	0x2000009c
 8000368:	20000190 	.word	0x20000190
 800036c:	08002db4 	.word	0x08002db4
 8000370:	08002dd0 	.word	0x08002dd0
 8000374:	2000019c 	.word	0x2000019c
 8000378:	20000004 	.word	0x20000004
 800037c:	08002de0 	.word	0x08002de0
 8000380:	20000198 	.word	0x20000198
		  		  				  }
		  		  				  else{
		  		  					n_adivinha = 0;
 8000384:	4b79      	ldr	r3, [pc, #484]	; (800056c <main+0x420>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
		  		  					  LCD2_Write_String(3,4,"                   " );
 800038a:	4a79      	ldr	r2, [pc, #484]	; (8000570 <main+0x424>)
 800038c:	2104      	movs	r1, #4
 800038e:	2003      	movs	r0, #3
 8000390:	f000 fdd0 	bl	8000f34 <LCD2_Write_String>
		  		  				  }
		  		  				  sprintf(stringBuffer,"Numero: %d", n_adivinha);
 8000394:	4b75      	ldr	r3, [pc, #468]	; (800056c <main+0x420>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	461a      	mov	r2, r3
 800039a:	4976      	ldr	r1, [pc, #472]	; (8000574 <main+0x428>)
 800039c:	4876      	ldr	r0, [pc, #472]	; (8000578 <main+0x42c>)
 800039e:	f002 f855 	bl	800244c <siprintf>
		  		  				  LCD2_Write_String(3,4, stringBuffer );
 80003a2:	4a75      	ldr	r2, [pc, #468]	; (8000578 <main+0x42c>)
 80003a4:	2104      	movs	r1, #4
 80003a6:	2003      	movs	r0, #3
 80003a8:	f000 fdc4 	bl	8000f34 <LCD2_Write_String>
		  		  			  }
		  		  			  HAL_Delay(100);
 80003ac:	2064      	movs	r0, #100	; 0x64
 80003ae:	f000 ff11 	bl	80011d4 <HAL_Delay>
		  		  		  }
		  		  		  if(B8 == 1){
 80003b2:	4b72      	ldr	r3, [pc, #456]	; (800057c <main+0x430>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d10c      	bne.n	80003d4 <main+0x288>
		  		  			  ply2_ok = true;
 80003ba:	4b71      	ldr	r3, [pc, #452]	; (8000580 <main+0x434>)
 80003bc:	2201      	movs	r2, #1
 80003be:	701a      	strb	r2, [r3, #0]
		  		  			  ply_adivinha = 1;
 80003c0:	4b70      	ldr	r3, [pc, #448]	; (8000584 <main+0x438>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	601a      	str	r2, [r3, #0]
		  		  			  B8 = 0;
 80003c6:	4b6d      	ldr	r3, [pc, #436]	; (800057c <main+0x430>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
		  		  			  HAL_Delay(1000);
 80003cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d0:	f000 ff00 	bl	80011d4 <HAL_Delay>
		  		  		  }
		  	  }
		  	  if (ply2_ok == true){
 80003d4:	4b6a      	ldr	r3, [pc, #424]	; (8000580 <main+0x434>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d024      	beq.n	8000426 <main+0x2da>
		  	  		  LCD2_Write_String(0,3, "                        " );
 80003dc:	4a6a      	ldr	r2, [pc, #424]	; (8000588 <main+0x43c>)
 80003de:	2103      	movs	r1, #3
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 fda7 	bl	8000f34 <LCD2_Write_String>
		  	  		  LCD2_Write_String(0,4, "                        " );
 80003e6:	4a68      	ldr	r2, [pc, #416]	; (8000588 <main+0x43c>)
 80003e8:	2104      	movs	r1, #4
 80003ea:	2000      	movs	r0, #0
 80003ec:	f000 fda2 	bl	8000f34 <LCD2_Write_String>

		  	  		  HAL_Delay(100);
 80003f0:	2064      	movs	r0, #100	; 0x64
 80003f2:	f000 feef 	bl	80011d4 <HAL_Delay>

		  	  		  sprintf(stringBuffer,"Escolhido: %d", n_adivinha);
 80003f6:	4b5d      	ldr	r3, [pc, #372]	; (800056c <main+0x420>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	461a      	mov	r2, r3
 80003fc:	4963      	ldr	r1, [pc, #396]	; (800058c <main+0x440>)
 80003fe:	485e      	ldr	r0, [pc, #376]	; (8000578 <main+0x42c>)
 8000400:	f002 f824 	bl	800244c <siprintf>
		  	  		  LCD2_Write_String(0,4, stringBuffer );
 8000404:	4a5c      	ldr	r2, [pc, #368]	; (8000578 <main+0x42c>)
 8000406:	2104      	movs	r1, #4
 8000408:	2000      	movs	r0, #0
 800040a:	f000 fd93 	bl	8000f34 <LCD2_Write_String>

		  	  		  HAL_Delay(1000);
 800040e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000412:	f000 fedf 	bl	80011d4 <HAL_Delay>

		  	  		  ply2_ok = false;
 8000416:	4b5a      	ldr	r3, [pc, #360]	; (8000580 <main+0x434>)
 8000418:	2200      	movs	r2, #0
 800041a:	701a      	strb	r2, [r3, #0]
		  	  		  compara = compara + 1; //controle para executar a comparação dos valores escolhidos pelos players
 800041c:	4b5c      	ldr	r3, [pc, #368]	; (8000590 <main+0x444>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	3301      	adds	r3, #1
 8000422:	4a5b      	ldr	r2, [pc, #364]	; (8000590 <main+0x444>)
 8000424:	6013      	str	r3, [r2, #0]

		  	  	  }


		  	  if(compara == 2){
 8000426:	4b5a      	ldr	r3, [pc, #360]	; (8000590 <main+0x444>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b02      	cmp	r3, #2
 800042c:	d176      	bne.n	800051c <main+0x3d0>
		  		  LCD1_Write_String(0,3, "                        " );
 800042e:	4a56      	ldr	r2, [pc, #344]	; (8000588 <main+0x43c>)
 8000430:	2103      	movs	r1, #3
 8000432:	2000      	movs	r0, #0
 8000434:	f000 fd5e 	bl	8000ef4 <LCD1_Write_String>
		  		  LCD1_Write_String(0,4, "                        " );
 8000438:	4a53      	ldr	r2, [pc, #332]	; (8000588 <main+0x43c>)
 800043a:	2104      	movs	r1, #4
 800043c:	2000      	movs	r0, #0
 800043e:	f000 fd59 	bl	8000ef4 <LCD1_Write_String>
		  		  LCD2_Write_String(0,3, "                        " );
 8000442:	4a51      	ldr	r2, [pc, #324]	; (8000588 <main+0x43c>)
 8000444:	2103      	movs	r1, #3
 8000446:	2000      	movs	r0, #0
 8000448:	f000 fd74 	bl	8000f34 <LCD2_Write_String>
		  		  LCD2_Write_String(0,4, "                        " );
 800044c:	4a4e      	ldr	r2, [pc, #312]	; (8000588 <main+0x43c>)
 800044e:	2104      	movs	r1, #4
 8000450:	2000      	movs	r0, #0
 8000452:	f000 fd6f 	bl	8000f34 <LCD2_Write_String>
		  		  if(n_configura == n_adivinha){
 8000456:	4b4f      	ldr	r3, [pc, #316]	; (8000594 <main+0x448>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b44      	ldr	r3, [pc, #272]	; (800056c <main+0x420>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	429a      	cmp	r2, r3
 8000460:	d114      	bne.n	800048c <main+0x340>
		  			  LCD1_Write_String(0,3, "PLY 2 ACERTOU!" );
 8000462:	4a4d      	ldr	r2, [pc, #308]	; (8000598 <main+0x44c>)
 8000464:	2103      	movs	r1, #3
 8000466:	2000      	movs	r0, #0
 8000468:	f000 fd44 	bl	8000ef4 <LCD1_Write_String>
		  			  LCD1_Write_String(0,4, "PARABENS PLY2!" );
 800046c:	4a4b      	ldr	r2, [pc, #300]	; (800059c <main+0x450>)
 800046e:	2104      	movs	r1, #4
 8000470:	2000      	movs	r0, #0
 8000472:	f000 fd3f 	bl	8000ef4 <LCD1_Write_String>
		  			  LCD2_Write_String(0,3, "PLY 2 ACERTOU!" );
 8000476:	4a48      	ldr	r2, [pc, #288]	; (8000598 <main+0x44c>)
 8000478:	2103      	movs	r1, #3
 800047a:	2000      	movs	r0, #0
 800047c:	f000 fd5a 	bl	8000f34 <LCD2_Write_String>
		  			  LCD2_Write_String(0,4, "PARABENS PLY2!" );
 8000480:	4a46      	ldr	r2, [pc, #280]	; (800059c <main+0x450>)
 8000482:	2104      	movs	r1, #4
 8000484:	2000      	movs	r0, #0
 8000486:	f000 fd55 	bl	8000f34 <LCD2_Write_String>
 800048a:	e009      	b.n	80004a0 <main+0x354>
		  		  }
		  		  else{
		  			  LCD1_Write_String(0,3, "PLY 2 ERROU!" );
 800048c:	4a44      	ldr	r2, [pc, #272]	; (80005a0 <main+0x454>)
 800048e:	2103      	movs	r1, #3
 8000490:	2000      	movs	r0, #0
 8000492:	f000 fd2f 	bl	8000ef4 <LCD1_Write_String>
		  			  LCD2_Write_String(0,3, "PLY 2 ERROU!" );
 8000496:	4a42      	ldr	r2, [pc, #264]	; (80005a0 <main+0x454>)
 8000498:	2103      	movs	r1, #3
 800049a:	2000      	movs	r0, #0
 800049c:	f000 fd4a 	bl	8000f34 <LCD2_Write_String>
		  		  }

		  		  HAL_Delay(3000);
 80004a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004a4:	f000 fe96 	bl	80011d4 <HAL_Delay>

		  		  LCD1_Write_String(0,1, "                        " );
 80004a8:	4a37      	ldr	r2, [pc, #220]	; (8000588 <main+0x43c>)
 80004aa:	2101      	movs	r1, #1
 80004ac:	2000      	movs	r0, #0
 80004ae:	f000 fd21 	bl	8000ef4 <LCD1_Write_String>
		  		  LCD1_Write_String(0,2, "                        " );
 80004b2:	4a35      	ldr	r2, [pc, #212]	; (8000588 <main+0x43c>)
 80004b4:	2102      	movs	r1, #2
 80004b6:	2000      	movs	r0, #0
 80004b8:	f000 fd1c 	bl	8000ef4 <LCD1_Write_String>
		  		  LCD1_Write_String(0,3, "                        " );
 80004bc:	4a32      	ldr	r2, [pc, #200]	; (8000588 <main+0x43c>)
 80004be:	2103      	movs	r1, #3
 80004c0:	2000      	movs	r0, #0
 80004c2:	f000 fd17 	bl	8000ef4 <LCD1_Write_String>
		  		  LCD1_Write_String(0,4, "                        " );
 80004c6:	4a30      	ldr	r2, [pc, #192]	; (8000588 <main+0x43c>)
 80004c8:	2104      	movs	r1, #4
 80004ca:	2000      	movs	r0, #0
 80004cc:	f000 fd12 	bl	8000ef4 <LCD1_Write_String>
		  		  LCD2_Write_String(0,1, "                        " );
 80004d0:	4a2d      	ldr	r2, [pc, #180]	; (8000588 <main+0x43c>)
 80004d2:	2101      	movs	r1, #1
 80004d4:	2000      	movs	r0, #0
 80004d6:	f000 fd2d 	bl	8000f34 <LCD2_Write_String>
		  		  LCD2_Write_String(0,2, "                        " );
 80004da:	4a2b      	ldr	r2, [pc, #172]	; (8000588 <main+0x43c>)
 80004dc:	2102      	movs	r1, #2
 80004de:	2000      	movs	r0, #0
 80004e0:	f000 fd28 	bl	8000f34 <LCD2_Write_String>
		  		  LCD2_Write_String(0,3, "                        " );
 80004e4:	4a28      	ldr	r2, [pc, #160]	; (8000588 <main+0x43c>)
 80004e6:	2103      	movs	r1, #3
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fd23 	bl	8000f34 <LCD2_Write_String>
		  		  LCD2_Write_String(0,4, "                        " );
 80004ee:	4a26      	ldr	r2, [pc, #152]	; (8000588 <main+0x43c>)
 80004f0:	2104      	movs	r1, #4
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fd1e 	bl	8000f34 <LCD2_Write_String>
		  		  n_configura = 0;
 80004f8:	4b26      	ldr	r3, [pc, #152]	; (8000594 <main+0x448>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
		  		  n_adivinha=0;
 80004fe:	4b1b      	ldr	r3, [pc, #108]	; (800056c <main+0x420>)
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
		  		  compara = 0;
 8000504:	4b22      	ldr	r3, [pc, #136]	; (8000590 <main+0x444>)
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
		  		  jogada = 2;
 800050a:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <main+0x458>)
 800050c:	2202      	movs	r2, #2
 800050e:	601a      	str	r2, [r3, #0]
		  		  ply1_ok = false;
 8000510:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <main+0x45c>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
		  		  ply2_ok = false;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <main+0x434>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	  }




	  if(jogada == 2){
 800051c:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <main+0x458>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b02      	cmp	r3, #2
 8000522:	f47f ae2d 	bne.w	8000180 <main+0x34>

		  if(ply_configura == 2){
 8000526:	4b21      	ldr	r3, [pc, #132]	; (80005ac <main+0x460>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d170      	bne.n	8000610 <main+0x4c4>

		  		  LCD2_Write_String(0,1,"ESCOLHENDO:");
 800052e:	4a20      	ldr	r2, [pc, #128]	; (80005b0 <main+0x464>)
 8000530:	2101      	movs	r1, #1
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fcfe 	bl	8000f34 <LCD2_Write_String>
		  		  LCD2_Write_String(0,3,"Escolhe e OK:");
 8000538:	4a1e      	ldr	r2, [pc, #120]	; (80005b4 <main+0x468>)
 800053a:	2103      	movs	r1, #3
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fcf9 	bl	8000f34 <LCD2_Write_String>

		  		  if(B8 == 0){
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <main+0x430>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d151      	bne.n	80005ee <main+0x4a2>
		  			  if(B9 == 1){
 800054a:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <main+0x46c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d14a      	bne.n	80005e8 <main+0x49c>
		  				  if(n_configura < range){
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <main+0x448>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	4b19      	ldr	r3, [pc, #100]	; (80005bc <main+0x470>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	429a      	cmp	r2, r3
 800055c:	da30      	bge.n	80005c0 <main+0x474>
		  					  n_configura++;//faz a leitura e quando apertar ok finaliza
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <main+0x448>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	3301      	adds	r3, #1
 8000564:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <main+0x448>)
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	e032      	b.n	80005d0 <main+0x484>
 800056a:	bf00      	nop
 800056c:	20000198 	.word	0x20000198
 8000570:	08002d94 	.word	0x08002d94
 8000574:	08002da8 	.word	0x08002da8
 8000578:	2000009c 	.word	0x2000009c
 800057c:	20000188 	.word	0x20000188
 8000580:	20000191 	.word	0x20000191
 8000584:	20000004 	.word	0x20000004
 8000588:	08002db4 	.word	0x08002db4
 800058c:	08002dd0 	.word	0x08002dd0
 8000590:	2000019c 	.word	0x2000019c
 8000594:	20000194 	.word	0x20000194
 8000598:	08002dec 	.word	0x08002dec
 800059c:	08002dfc 	.word	0x08002dfc
 80005a0:	08002e0c 	.word	0x08002e0c
 80005a4:	20000008 	.word	0x20000008
 80005a8:	20000190 	.word	0x20000190
 80005ac:	20000000 	.word	0x20000000
 80005b0:	08002d78 	.word	0x08002d78
 80005b4:	08002d84 	.word	0x08002d84
 80005b8:	2000018c 	.word	0x2000018c
 80005bc:	2000000c 	.word	0x2000000c
		  				  }
		  				  else{
		  					  n_configura = 0;
 80005c0:	4ba0      	ldr	r3, [pc, #640]	; (8000844 <main+0x6f8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
		  					  LCD2_Write_String(3,4,"                   " );
 80005c6:	4aa0      	ldr	r2, [pc, #640]	; (8000848 <main+0x6fc>)
 80005c8:	2104      	movs	r1, #4
 80005ca:	2003      	movs	r0, #3
 80005cc:	f000 fcb2 	bl	8000f34 <LCD2_Write_String>
		  				  }
		  				  sprintf(stringBuffer,"Numero: %d", n_configura);
 80005d0:	4b9c      	ldr	r3, [pc, #624]	; (8000844 <main+0x6f8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	499d      	ldr	r1, [pc, #628]	; (800084c <main+0x700>)
 80005d8:	489d      	ldr	r0, [pc, #628]	; (8000850 <main+0x704>)
 80005da:	f001 ff37 	bl	800244c <siprintf>
		  				  LCD2_Write_String(3,4, stringBuffer );
 80005de:	4a9c      	ldr	r2, [pc, #624]	; (8000850 <main+0x704>)
 80005e0:	2104      	movs	r1, #4
 80005e2:	2003      	movs	r0, #3
 80005e4:	f000 fca6 	bl	8000f34 <LCD2_Write_String>
		  			  }
		  			  HAL_Delay(100);
 80005e8:	2064      	movs	r0, #100	; 0x64
 80005ea:	f000 fdf3 	bl	80011d4 <HAL_Delay>
		  		  }
		  		  if(B8 == 1){
 80005ee:	4b99      	ldr	r3, [pc, #612]	; (8000854 <main+0x708>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d10c      	bne.n	8000610 <main+0x4c4>
		  			  ply2_ok = true;
 80005f6:	4b98      	ldr	r3, [pc, #608]	; (8000858 <main+0x70c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
		  			  ply_configura = 1;
 80005fc:	4b97      	ldr	r3, [pc, #604]	; (800085c <main+0x710>)
 80005fe:	2201      	movs	r2, #1
 8000600:	601a      	str	r2, [r3, #0]
		  			  B8 = 0;
 8000602:	4b94      	ldr	r3, [pc, #592]	; (8000854 <main+0x708>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
					  HAL_Delay(1000);
 8000608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060c:	f000 fde2 	bl	80011d4 <HAL_Delay>
		  		  }
		  	  }

		  	  if (ply2_ok == true){
 8000610:	4b91      	ldr	r3, [pc, #580]	; (8000858 <main+0x70c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d024      	beq.n	8000662 <main+0x516>
		  		  LCD2_Write_String(0,3, "                        " );
 8000618:	4a91      	ldr	r2, [pc, #580]	; (8000860 <main+0x714>)
 800061a:	2103      	movs	r1, #3
 800061c:	2000      	movs	r0, #0
 800061e:	f000 fc89 	bl	8000f34 <LCD2_Write_String>
		  		  LCD2_Write_String(0,4, "                        " );
 8000622:	4a8f      	ldr	r2, [pc, #572]	; (8000860 <main+0x714>)
 8000624:	2104      	movs	r1, #4
 8000626:	2000      	movs	r0, #0
 8000628:	f000 fc84 	bl	8000f34 <LCD2_Write_String>

		  		  HAL_Delay(100);
 800062c:	2064      	movs	r0, #100	; 0x64
 800062e:	f000 fdd1 	bl	80011d4 <HAL_Delay>

		  		  sprintf(stringBuffer,"Escolhido: %d", n_configura);
 8000632:	4b84      	ldr	r3, [pc, #528]	; (8000844 <main+0x6f8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	498a      	ldr	r1, [pc, #552]	; (8000864 <main+0x718>)
 800063a:	4885      	ldr	r0, [pc, #532]	; (8000850 <main+0x704>)
 800063c:	f001 ff06 	bl	800244c <siprintf>
		  		  LCD2_Write_String(0,4, stringBuffer );
 8000640:	4a83      	ldr	r2, [pc, #524]	; (8000850 <main+0x704>)
 8000642:	2104      	movs	r1, #4
 8000644:	2000      	movs	r0, #0
 8000646:	f000 fc75 	bl	8000f34 <LCD2_Write_String>

		  		  HAL_Delay(1000);
 800064a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064e:	f000 fdc1 	bl	80011d4 <HAL_Delay>

		  		  ply2_ok = false;
 8000652:	4b81      	ldr	r3, [pc, #516]	; (8000858 <main+0x70c>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
		  		  compara = compara + 1; //controle para executar a comparação dos valores escolhidos pelos players
 8000658:	4b83      	ldr	r3, [pc, #524]	; (8000868 <main+0x71c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	4a82      	ldr	r2, [pc, #520]	; (8000868 <main+0x71c>)
 8000660:	6013      	str	r3, [r2, #0]

		  	  }

		  	  if(ply_adivinha == 1){
 8000662:	4b82      	ldr	r3, [pc, #520]	; (800086c <main+0x720>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d145      	bne.n	80006f6 <main+0x5aa>
		  		  LCD1_Write_String(0,1,"ADIVINHANDO");
 800066a:	4a81      	ldr	r2, [pc, #516]	; (8000870 <main+0x724>)
 800066c:	2101      	movs	r1, #1
 800066e:	2000      	movs	r0, #0
 8000670:	f000 fc40 	bl	8000ef4 <LCD1_Write_String>
		  		  LCD1_Write_String(0,3,"Escolhe e OK:");
 8000674:	4a7f      	ldr	r2, [pc, #508]	; (8000874 <main+0x728>)
 8000676:	2103      	movs	r1, #3
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fc3b 	bl	8000ef4 <LCD1_Write_String>

		  		  if(B0 == 0){
 800067e:	4b7e      	ldr	r3, [pc, #504]	; (8000878 <main+0x72c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d126      	bne.n	80006d4 <main+0x588>
		  		  			  if(B1 == 1){
 8000686:	4b7d      	ldr	r3, [pc, #500]	; (800087c <main+0x730>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d11f      	bne.n	80006ce <main+0x582>
		  		  				  if(n_adivinha < range){
 800068e:	4b7c      	ldr	r3, [pc, #496]	; (8000880 <main+0x734>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	4b7c      	ldr	r3, [pc, #496]	; (8000884 <main+0x738>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	429a      	cmp	r2, r3
 8000698:	da05      	bge.n	80006a6 <main+0x55a>
		  		  					n_adivinha++;//faz a leitura e quando apertar ok finaliza
 800069a:	4b79      	ldr	r3, [pc, #484]	; (8000880 <main+0x734>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	3301      	adds	r3, #1
 80006a0:	4a77      	ldr	r2, [pc, #476]	; (8000880 <main+0x734>)
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	e007      	b.n	80006b6 <main+0x56a>
		  		  				  }
		  		  				  else{
		  		  					n_adivinha = 0;
 80006a6:	4b76      	ldr	r3, [pc, #472]	; (8000880 <main+0x734>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
		  		  					  LCD1_Write_String(3,4,"                   " );
 80006ac:	4a66      	ldr	r2, [pc, #408]	; (8000848 <main+0x6fc>)
 80006ae:	2104      	movs	r1, #4
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 fc1f 	bl	8000ef4 <LCD1_Write_String>
		  		  				  }
		  		  				  sprintf(stringBuffer,"Numero: %d", n_adivinha);
 80006b6:	4b72      	ldr	r3, [pc, #456]	; (8000880 <main+0x734>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	4963      	ldr	r1, [pc, #396]	; (800084c <main+0x700>)
 80006be:	4864      	ldr	r0, [pc, #400]	; (8000850 <main+0x704>)
 80006c0:	f001 fec4 	bl	800244c <siprintf>
		  		  				  LCD1_Write_String(3,4, stringBuffer );
 80006c4:	4a62      	ldr	r2, [pc, #392]	; (8000850 <main+0x704>)
 80006c6:	2104      	movs	r1, #4
 80006c8:	2003      	movs	r0, #3
 80006ca:	f000 fc13 	bl	8000ef4 <LCD1_Write_String>
		  		  			  }
		  		  			  HAL_Delay(100);
 80006ce:	2064      	movs	r0, #100	; 0x64
 80006d0:	f000 fd80 	bl	80011d4 <HAL_Delay>
		  		  		  }
		  		  		  if(B0 == 1){
 80006d4:	4b68      	ldr	r3, [pc, #416]	; (8000878 <main+0x72c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d10c      	bne.n	80006f6 <main+0x5aa>
		  		  			  ply1_ok = true;
 80006dc:	4b6a      	ldr	r3, [pc, #424]	; (8000888 <main+0x73c>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
		  		  			  ply_adivinha = 2;
 80006e2:	4b62      	ldr	r3, [pc, #392]	; (800086c <main+0x720>)
 80006e4:	2202      	movs	r2, #2
 80006e6:	601a      	str	r2, [r3, #0]
		  		  			  B0 = 0;
 80006e8:	4b63      	ldr	r3, [pc, #396]	; (8000878 <main+0x72c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
							  HAL_Delay(1000);
 80006ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f2:	f000 fd6f 	bl	80011d4 <HAL_Delay>
		  		  		  }
		  	  }
		  	  if (ply1_ok == true){
 80006f6:	4b64      	ldr	r3, [pc, #400]	; (8000888 <main+0x73c>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d024      	beq.n	8000748 <main+0x5fc>
		  	  		  LCD1_Write_String(0,3, "                        " );
 80006fe:	4a58      	ldr	r2, [pc, #352]	; (8000860 <main+0x714>)
 8000700:	2103      	movs	r1, #3
 8000702:	2000      	movs	r0, #0
 8000704:	f000 fbf6 	bl	8000ef4 <LCD1_Write_String>
		  	  		  LCD1_Write_String(0,4, "                        " );
 8000708:	4a55      	ldr	r2, [pc, #340]	; (8000860 <main+0x714>)
 800070a:	2104      	movs	r1, #4
 800070c:	2000      	movs	r0, #0
 800070e:	f000 fbf1 	bl	8000ef4 <LCD1_Write_String>

		  	  		  HAL_Delay(100);
 8000712:	2064      	movs	r0, #100	; 0x64
 8000714:	f000 fd5e 	bl	80011d4 <HAL_Delay>

		  	  		  sprintf(stringBuffer,"Escolhido: %d", n_adivinha);
 8000718:	4b59      	ldr	r3, [pc, #356]	; (8000880 <main+0x734>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4951      	ldr	r1, [pc, #324]	; (8000864 <main+0x718>)
 8000720:	484b      	ldr	r0, [pc, #300]	; (8000850 <main+0x704>)
 8000722:	f001 fe93 	bl	800244c <siprintf>
		  	  		  LCD1_Write_String(0,4, stringBuffer );
 8000726:	4a4a      	ldr	r2, [pc, #296]	; (8000850 <main+0x704>)
 8000728:	2104      	movs	r1, #4
 800072a:	2000      	movs	r0, #0
 800072c:	f000 fbe2 	bl	8000ef4 <LCD1_Write_String>

		  	  		  HAL_Delay(1000);
 8000730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000734:	f000 fd4e 	bl	80011d4 <HAL_Delay>

		  	  		  ply1_ok = false;
 8000738:	4b53      	ldr	r3, [pc, #332]	; (8000888 <main+0x73c>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
		  	  		  compara = compara + 1; //controle para executar a comparação dos valores escolhidos pelos players
 800073e:	4b4a      	ldr	r3, [pc, #296]	; (8000868 <main+0x71c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	4a48      	ldr	r2, [pc, #288]	; (8000868 <main+0x71c>)
 8000746:	6013      	str	r3, [r2, #0]

		  	  	  }


		  	  if(compara == 2){
 8000748:	4b47      	ldr	r3, [pc, #284]	; (8000868 <main+0x71c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b02      	cmp	r3, #2
 800074e:	f47f ad17 	bne.w	8000180 <main+0x34>
		  		  LCD1_Write_String(0,3, "                        " );
 8000752:	4a43      	ldr	r2, [pc, #268]	; (8000860 <main+0x714>)
 8000754:	2103      	movs	r1, #3
 8000756:	2000      	movs	r0, #0
 8000758:	f000 fbcc 	bl	8000ef4 <LCD1_Write_String>
		  		  LCD1_Write_String(0,4, "                        " );
 800075c:	4a40      	ldr	r2, [pc, #256]	; (8000860 <main+0x714>)
 800075e:	2104      	movs	r1, #4
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fbc7 	bl	8000ef4 <LCD1_Write_String>
		  		  LCD2_Write_String(0,3, "                        " );
 8000766:	4a3e      	ldr	r2, [pc, #248]	; (8000860 <main+0x714>)
 8000768:	2103      	movs	r1, #3
 800076a:	2000      	movs	r0, #0
 800076c:	f000 fbe2 	bl	8000f34 <LCD2_Write_String>
		  		  LCD2_Write_String(0,4, "                        " );
 8000770:	4a3b      	ldr	r2, [pc, #236]	; (8000860 <main+0x714>)
 8000772:	2104      	movs	r1, #4
 8000774:	2000      	movs	r0, #0
 8000776:	f000 fbdd 	bl	8000f34 <LCD2_Write_String>
		  		  if(n_configura == n_adivinha){
 800077a:	4b32      	ldr	r3, [pc, #200]	; (8000844 <main+0x6f8>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4b40      	ldr	r3, [pc, #256]	; (8000880 <main+0x734>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	429a      	cmp	r2, r3
 8000784:	d114      	bne.n	80007b0 <main+0x664>
		  			  LCD1_Write_String(0,3, "PLY 1 ACERTOU!" );
 8000786:	4a41      	ldr	r2, [pc, #260]	; (800088c <main+0x740>)
 8000788:	2103      	movs	r1, #3
 800078a:	2000      	movs	r0, #0
 800078c:	f000 fbb2 	bl	8000ef4 <LCD1_Write_String>
		  			  LCD1_Write_String(0,4, "PARABENS PLY1!" );
 8000790:	4a3f      	ldr	r2, [pc, #252]	; (8000890 <main+0x744>)
 8000792:	2104      	movs	r1, #4
 8000794:	2000      	movs	r0, #0
 8000796:	f000 fbad 	bl	8000ef4 <LCD1_Write_String>
		  			  LCD2_Write_String(0,3, "PLY 1 ACERTOU!" );
 800079a:	4a3c      	ldr	r2, [pc, #240]	; (800088c <main+0x740>)
 800079c:	2103      	movs	r1, #3
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 fbc8 	bl	8000f34 <LCD2_Write_String>
		  			  LCD2_Write_String(0,4, "PARABENS PLY1!" );
 80007a4:	4a3a      	ldr	r2, [pc, #232]	; (8000890 <main+0x744>)
 80007a6:	2104      	movs	r1, #4
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fbc3 	bl	8000f34 <LCD2_Write_String>
 80007ae:	e009      	b.n	80007c4 <main+0x678>
		  		  }
		  		  else{
		  			  LCD1_Write_String(0,3, "PLY 1 ERROU!" );
 80007b0:	4a38      	ldr	r2, [pc, #224]	; (8000894 <main+0x748>)
 80007b2:	2103      	movs	r1, #3
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 fb9d 	bl	8000ef4 <LCD1_Write_String>
		  			  LCD2_Write_String(0,3, "PLY 1 ERROU!" );
 80007ba:	4a36      	ldr	r2, [pc, #216]	; (8000894 <main+0x748>)
 80007bc:	2103      	movs	r1, #3
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 fbb8 	bl	8000f34 <LCD2_Write_String>
		  		  }

		  		  HAL_Delay(3000);
 80007c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007c8:	f000 fd04 	bl	80011d4 <HAL_Delay>

		  		  LCD1_Write_String(0,1, "                        " );
 80007cc:	4a24      	ldr	r2, [pc, #144]	; (8000860 <main+0x714>)
 80007ce:	2101      	movs	r1, #1
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 fb8f 	bl	8000ef4 <LCD1_Write_String>
		  		  LCD1_Write_String(0,2, "                        " );
 80007d6:	4a22      	ldr	r2, [pc, #136]	; (8000860 <main+0x714>)
 80007d8:	2102      	movs	r1, #2
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 fb8a 	bl	8000ef4 <LCD1_Write_String>
		  		  LCD1_Write_String(0,3, "                        " );
 80007e0:	4a1f      	ldr	r2, [pc, #124]	; (8000860 <main+0x714>)
 80007e2:	2103      	movs	r1, #3
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 fb85 	bl	8000ef4 <LCD1_Write_String>
		  		  LCD1_Write_String(0,4, "                        " );
 80007ea:	4a1d      	ldr	r2, [pc, #116]	; (8000860 <main+0x714>)
 80007ec:	2104      	movs	r1, #4
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 fb80 	bl	8000ef4 <LCD1_Write_String>
		  		  LCD2_Write_String(0,1, "                        " );
 80007f4:	4a1a      	ldr	r2, [pc, #104]	; (8000860 <main+0x714>)
 80007f6:	2101      	movs	r1, #1
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 fb9b 	bl	8000f34 <LCD2_Write_String>
		  		  LCD2_Write_String(0,2, "                        " );
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <main+0x714>)
 8000800:	2102      	movs	r1, #2
 8000802:	2000      	movs	r0, #0
 8000804:	f000 fb96 	bl	8000f34 <LCD2_Write_String>
		  		  LCD2_Write_String(0,3, "                        " );
 8000808:	4a15      	ldr	r2, [pc, #84]	; (8000860 <main+0x714>)
 800080a:	2103      	movs	r1, #3
 800080c:	2000      	movs	r0, #0
 800080e:	f000 fb91 	bl	8000f34 <LCD2_Write_String>
		  		  LCD2_Write_String(0,4, "                        " );
 8000812:	4a13      	ldr	r2, [pc, #76]	; (8000860 <main+0x714>)
 8000814:	2104      	movs	r1, #4
 8000816:	2000      	movs	r0, #0
 8000818:	f000 fb8c 	bl	8000f34 <LCD2_Write_String>
		  		  n_configura = 0;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <main+0x6f8>)
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
		  		  n_adivinha=0;
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <main+0x734>)
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
		  		  compara = 0;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <main+0x71c>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
		  		  jogada = 1;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <main+0x74c>)
 8000830:	2201      	movs	r2, #1
 8000832:	601a      	str	r2, [r3, #0]
		  		  ply1_ok = false;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <main+0x73c>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
				  ply2_ok = false;
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <main+0x70c>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)) {
 8000840:	e49e      	b.n	8000180 <main+0x34>
 8000842:	bf00      	nop
 8000844:	20000194 	.word	0x20000194
 8000848:	08002d94 	.word	0x08002d94
 800084c:	08002da8 	.word	0x08002da8
 8000850:	2000009c 	.word	0x2000009c
 8000854:	20000188 	.word	0x20000188
 8000858:	20000191 	.word	0x20000191
 800085c:	20000000 	.word	0x20000000
 8000860:	08002db4 	.word	0x08002db4
 8000864:	08002dd0 	.word	0x08002dd0
 8000868:	2000019c 	.word	0x2000019c
 800086c:	20000004 	.word	0x20000004
 8000870:	08002de0 	.word	0x08002de0
 8000874:	08002d84 	.word	0x08002d84
 8000878:	20000180 	.word	0x20000180
 800087c:	20000184 	.word	0x20000184
 8000880:	20000198 	.word	0x20000198
 8000884:	2000000c 	.word	0x2000000c
 8000888:	20000190 	.word	0x20000190
 800088c:	08002e1c 	.word	0x08002e1c
 8000890:	08002e2c 	.word	0x08002e2c
 8000894:	08002e3c 	.word	0x08002e3c
 8000898:	20000008 	.word	0x20000008

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b090      	sub	sp, #64	; 0x40
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	2228      	movs	r2, #40	; 0x28
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fdc6 	bl	800243c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c2:	2301      	movs	r3, #1
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c6:	2310      	movs	r3, #16
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ce:	f107 0318 	add.w	r3, r7, #24
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 ff3a 	bl	800174c <HAL_RCC_OscConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008de:	f000 f8d3 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e2:	230f      	movs	r3, #15
 80008e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 f9a8 	bl	8001c50 <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000906:	f000 f8bf 	bl	8000a88 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3740      	adds	r7, #64	; 0x40
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_SPI1_Init+0x64>)
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <MX_SPI1_Init+0x68>)
 800091c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_SPI1_Init+0x64>)
 8000920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000924:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_SPI1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_SPI1_Init+0x64>)
 8000940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000944:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_SPI1_Init+0x64>)
 8000948:	2238      	movs	r2, #56	; 0x38
 800094a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_SPI1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_SPI1_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_SPI1_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_SPI1_Init+0x64>)
 8000960:	220a      	movs	r2, #10
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_SPI1_Init+0x64>)
 8000966:	f001 fad9 	bl	8001f1c <HAL_SPI_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000970:	f000 f88a 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000d0 	.word	0x200000d0
 800097c:	40013000 	.word	0x40013000

08000980 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_SPI2_Init+0x64>)
 8000986:	4a18      	ldr	r2, [pc, #96]	; (80009e8 <MX_SPI2_Init+0x68>)
 8000988:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_SPI2_Init+0x64>)
 800098c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000990:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_SPI2_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_SPI2_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009b4:	2238      	movs	r2, #56	; 0x38
 80009b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009cc:	220a      	movs	r2, #10
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_SPI2_Init+0x64>)
 80009d2:	f001 faa3 	bl	8001f1c <HAL_SPI_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009dc:	f000 f854 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000128 	.word	0x20000128
 80009e8:	40003800 	.word	0x40003800

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0304 	and.w	r3, r3, #4
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a1e:	f043 0308 	orr.w	r3, r3, #8
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0308 	and.w	r3, r3, #8
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD1_RST_Pin|LCD1_CE_Pin|LCD1_DC_Pin|LCD2_DC_Pin
 8000a30:	2200      	movs	r2, #0
 8000a32:	f240 711c 	movw	r1, #1820	; 0x71c
 8000a36:	4812      	ldr	r0, [pc, #72]	; (8000a80 <MX_GPIO_Init+0x94>)
 8000a38:	f000 fe6f 	bl	800171a <HAL_GPIO_WritePin>
                          |LCD2_CE_Pin|LCD2_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD1_RST_Pin LCD1_CE_Pin LCD1_DC_Pin LCD2_DC_Pin
                           LCD2_CE_Pin LCD2_RST_Pin */
  GPIO_InitStruct.Pin = LCD1_RST_Pin|LCD1_CE_Pin|LCD1_DC_Pin|LCD2_DC_Pin
 8000a3c:	f240 731c 	movw	r3, #1820	; 0x71c
 8000a40:	60bb      	str	r3, [r7, #8]
                          |LCD2_CE_Pin|LCD2_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	4619      	mov	r1, r3
 8000a54:	480a      	ldr	r0, [pc, #40]	; (8000a80 <MX_GPIO_Init+0x94>)
 8000a56:	f000 fcc5 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_B0_Pin BTN_B1_Pin BTN_B8_Pin BTN_B9_Pin */
  GPIO_InitStruct.Pin = BTN_B0_Pin|BTN_B1_Pin|BTN_B8_Pin|BTN_B9_Pin;
 8000a5a:	f240 3303 	movw	r3, #771	; 0x303
 8000a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a64:	2302      	movs	r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_GPIO_Init+0x98>)
 8000a70:	f000 fcb8 	bl	80013e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a74:	bf00      	nop
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010800 	.word	0x40010800
 8000a84:	40010c00 	.word	0x40010c00

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_MspInit+0x5c>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <HAL_MspInit+0x5c>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6193      	str	r3, [r2, #24]
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_MspInit+0x5c>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_MspInit+0x5c>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_MspInit+0x5c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	61d3      	str	r3, [r2, #28]
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_MspInit+0x5c>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_MspInit+0x60>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_MspInit+0x60>)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40010000 	.word	0x40010000

08000af8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a37      	ldr	r2, [pc, #220]	; (8000bf0 <HAL_SPI_MspInit+0xf8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d130      	bne.n	8000b7a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b18:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <HAL_SPI_MspInit+0xfc>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a35      	ldr	r2, [pc, #212]	; (8000bf4 <HAL_SPI_MspInit+0xfc>)
 8000b1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b33      	ldr	r3, [pc, #204]	; (8000bf4 <HAL_SPI_MspInit+0xfc>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <HAL_SPI_MspInit+0xfc>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a2f      	ldr	r2, [pc, #188]	; (8000bf4 <HAL_SPI_MspInit+0xfc>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <HAL_SPI_MspInit+0xfc>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b48:	23a0      	movs	r3, #160	; 0xa0
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4827      	ldr	r0, [pc, #156]	; (8000bf8 <HAL_SPI_MspInit+0x100>)
 8000b5c:	f000 fc42 	bl	80013e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b60:	2340      	movs	r3, #64	; 0x40
 8000b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0318 	add.w	r3, r7, #24
 8000b70:	4619      	mov	r1, r3
 8000b72:	4821      	ldr	r0, [pc, #132]	; (8000bf8 <HAL_SPI_MspInit+0x100>)
 8000b74:	f000 fc36 	bl	80013e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b78:	e036      	b.n	8000be8 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a1f      	ldr	r2, [pc, #124]	; (8000bfc <HAL_SPI_MspInit+0x104>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d131      	bne.n	8000be8 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_SPI_MspInit+0xfc>)
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	4a1a      	ldr	r2, [pc, #104]	; (8000bf4 <HAL_SPI_MspInit+0xfc>)
 8000b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8e:	61d3      	str	r3, [r2, #28]
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_SPI_MspInit+0xfc>)
 8000b92:	69db      	ldr	r3, [r3, #28]
 8000b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_SPI_MspInit+0xfc>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <HAL_SPI_MspInit+0xfc>)
 8000ba2:	f043 0308 	orr.w	r3, r3, #8
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_SPI_MspInit+0xfc>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0308 	and.w	r3, r3, #8
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000bb4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 0318 	add.w	r3, r7, #24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <HAL_SPI_MspInit+0x108>)
 8000bca:	f000 fc0b 	bl	80013e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000bce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	4619      	mov	r1, r3
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <HAL_SPI_MspInit+0x108>)
 8000be4:	f000 fbfe 	bl	80013e4 <HAL_GPIO_Init>
}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40013000 	.word	0x40013000
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010800 	.word	0x40010800
 8000bfc:	40003800 	.word	0x40003800
 8000c00:	40010c00 	.word	0x40010c00

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr

08000c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4a:	f000 faa7 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f001 fbb0 	bl	80023e8 <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20005000 	.word	0x20005000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	200001a0 	.word	0x200001a0
 8000cbc:	200001b8 	.word	0x200001b8

08000cc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <LCD1_Init>:
uint8_t spiOK = 0U;

/**
 * Initialize LCD.
 */
void LCD1_Init(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  LCD1_Reset();
 8000cd0:	f000 f824 	bl	8000d1c <LCD1_Reset>
  LCD1_Write_Command(0x21);
 8000cd4:	2021      	movs	r0, #33	; 0x21
 8000cd6:	f000 f94d 	bl	8000f74 <LCD1_Write_Command>
  LCD1_Write_Command(0xD0);
 8000cda:	20d0      	movs	r0, #208	; 0xd0
 8000cdc:	f000 f94a 	bl	8000f74 <LCD1_Write_Command>
  LCD1_Write_Command(0x20);
 8000ce0:	2020      	movs	r0, #32
 8000ce2:	f000 f947 	bl	8000f74 <LCD1_Write_Command>
  LCD1_Write_Command(0x0C);
 8000ce6:	200c      	movs	r0, #12
 8000ce8:	f000 f944 	bl	8000f74 <LCD1_Write_Command>
  LCD1_Clear();
 8000cec:	f000 f874 	bl	8000dd8 <LCD1_Clear>
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <LCD2_Init>:

void LCD2_Init(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  LCD2_Reset();
 8000cf8:	f000 f824 	bl	8000d44 <LCD2_Reset>
  LCD2_Write_Command(0x21);
 8000cfc:	2021      	movs	r0, #33	; 0x21
 8000cfe:	f000 f961 	bl	8000fc4 <LCD2_Write_Command>
  LCD2_Write_Command(0xD0);
 8000d02:	20d0      	movs	r0, #208	; 0xd0
 8000d04:	f000 f95e 	bl	8000fc4 <LCD2_Write_Command>
  LCD2_Write_Command(0x20);
 8000d08:	2020      	movs	r0, #32
 8000d0a:	f000 f95b 	bl	8000fc4 <LCD2_Write_Command>
  LCD2_Write_Command(0x0C);
 8000d0e:	200c      	movs	r0, #12
 8000d10:	f000 f958 	bl	8000fc4 <LCD2_Write_Command>
  LCD2_Clear();
 8000d14:	f000 f881 	bl	8000e1a <LCD2_Clear>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <LCD1_Reset>:

/**
 * Reset LCD.
 */
void LCD1_Reset(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD1_RESET_PORT, LCD1_RESET_PIN, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2104      	movs	r1, #4
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <LCD1_Reset+0x24>)
 8000d26:	f000 fcf8 	bl	800171a <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000d2a:	2032      	movs	r0, #50	; 0x32
 8000d2c:	f000 fa52 	bl	80011d4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD1_RESET_PORT, LCD1_RESET_PIN, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2104      	movs	r1, #4
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <LCD1_Reset+0x24>)
 8000d36:	f000 fcf0 	bl	800171a <HAL_GPIO_WritePin>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40010800 	.word	0x40010800

08000d44 <LCD2_Reset>:

void LCD2_Reset(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD2_RESET_PORT, LCD2_RESET_PIN, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4e:	4807      	ldr	r0, [pc, #28]	; (8000d6c <LCD2_Reset+0x28>)
 8000d50:	f000 fce3 	bl	800171a <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000d54:	2032      	movs	r0, #50	; 0x32
 8000d56:	f000 fa3d 	bl	80011d4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD2_RESET_PORT, LCD2_RESET_PIN, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <LCD2_Reset+0x28>)
 8000d62:	f000 fcda 	bl	800171a <HAL_GPIO_WritePin>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40010800 	.word	0x40010800

08000d70 <LCD1_Set_Postion>:
/**
 * Set LCD cursor position.
 * @param PosX X Position
 * @param PosY Y Position
 */
void LCD1_Set_Postion(uint8_t PosX, uint8_t PosY) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	460a      	mov	r2, r1
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	71bb      	strb	r3, [r7, #6]
  LCD1_Write_Command(0x40 | PosY);
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f8f3 	bl	8000f74 <LCD1_Write_Command>
  LCD1_Write_Command(0x80 | PosX);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f8ec 	bl	8000f74 <LCD1_Write_Command>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <LCD2_Set_Postion>:

void LCD2_Set_Postion(uint8_t PosX, uint8_t PosY) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	460a      	mov	r2, r1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	4613      	mov	r3, r2
 8000db2:	71bb      	strb	r3, [r7, #6]
  LCD2_Write_Command(0x40 | PosY);
 8000db4:	79bb      	ldrb	r3, [r7, #6]
 8000db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 f901 	bl	8000fc4 <LCD2_Write_Command>
  LCD2_Write_Command(0x80 | PosX);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f8fa 	bl	8000fc4 <LCD2_Write_Command>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <LCD1_Clear>:

/**
 * Clear all contents on LCD.
 */
void LCD1_Clear(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
  uint8_t t;
  uint8_t k;
  LCD1_Set_Postion(0,0);
 8000dde:	2100      	movs	r1, #0
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff ffc5 	bl	8000d70 <LCD1_Set_Postion>
  for(t=0;t<6;t++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	e00e      	b.n	8000e0a <LCD1_Clear+0x32>
  {
    for(k=0;k<84;k++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	71bb      	strb	r3, [r7, #6]
 8000df0:	e005      	b.n	8000dfe <LCD1_Clear+0x26>
    {
      LCD1_Write_Data(0x00);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f912 	bl	800101c <LCD1_Write_Data>
    for(k=0;k<84;k++)
 8000df8:	79bb      	ldrb	r3, [r7, #6]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	71bb      	strb	r3, [r7, #6]
 8000dfe:	79bb      	ldrb	r3, [r7, #6]
 8000e00:	2b53      	cmp	r3, #83	; 0x53
 8000e02:	d9f6      	bls.n	8000df2 <LCD1_Clear+0x1a>
  for(t=0;t<6;t++)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	3301      	adds	r3, #1
 8000e08:	71fb      	strb	r3, [r7, #7]
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	d9ed      	bls.n	8000dec <LCD1_Clear+0x14>
    }
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <LCD2_Clear>:

void LCD2_Clear(void) {
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
  uint8_t t;
  uint8_t k;
  LCD2_Set_Postion(0,0);
 8000e20:	2100      	movs	r1, #0
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff ffbe 	bl	8000da4 <LCD2_Set_Postion>
  for(t=0;t<6;t++)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	e00e      	b.n	8000e4c <LCD2_Clear+0x32>
  {
    for(k=0;k<84;k++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	71bb      	strb	r3, [r7, #6]
 8000e32:	e005      	b.n	8000e40 <LCD2_Clear+0x26>
    {
      LCD2_Write_Data(0x00);
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 f919 	bl	800106c <LCD2_Write_Data>
    for(k=0;k<84;k++)
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	71bb      	strb	r3, [r7, #6]
 8000e40:	79bb      	ldrb	r3, [r7, #6]
 8000e42:	2b53      	cmp	r3, #83	; 0x53
 8000e44:	d9f6      	bls.n	8000e34 <LCD2_Clear+0x1a>
  for(t=0;t<6;t++)
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	71fb      	strb	r3, [r7, #7]
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2b05      	cmp	r3, #5
 8000e50:	d9ed      	bls.n	8000e2e <LCD2_Clear+0x14>
    }
  }
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <LCD1_Write_Char>:

/**
 * Write a single char to LCD.
 * @param ch char to write.
 */
void LCD1_Write_Char(uint8_t ch) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  uint8_t line;
  ch -= 32;
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	3b20      	subs	r3, #32
 8000e6a:	71fb      	strb	r3, [r7, #7]
  for (line=0; line<6; line++) LCD1_Write_Data(font6x8[ch][line]);
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
 8000e70:	e00f      	b.n	8000e92 <LCD1_Write_Char+0x36>
 8000e72:	79fa      	ldrb	r2, [r7, #7]
 8000e74:	7bf9      	ldrb	r1, [r7, #15]
 8000e76:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <LCD1_Write_Char+0x48>)
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4403      	add	r3, r0
 8000e82:	440b      	add	r3, r1
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f8c8 	bl	800101c <LCD1_Write_Data>
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	73fb      	strb	r3, [r7, #15]
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	2b05      	cmp	r3, #5
 8000e96:	d9ec      	bls.n	8000e72 <LCD1_Write_Char+0x16>
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	08002e6c 	.word	0x08002e6c

08000ea8 <LCD2_Write_Char>:

void LCD2_Write_Char(uint8_t ch) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  uint8_t line;
  ch -= 32;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	3b20      	subs	r3, #32
 8000eb6:	71fb      	strb	r3, [r7, #7]
  for (line=0; line<6; line++) LCD2_Write_Data(font6x8[ch][line]);
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e00f      	b.n	8000ede <LCD2_Write_Char+0x36>
 8000ebe:	79fa      	ldrb	r2, [r7, #7]
 8000ec0:	7bf9      	ldrb	r1, [r7, #15]
 8000ec2:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <LCD2_Write_Char+0x48>)
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4403      	add	r3, r0
 8000ece:	440b      	add	r3, r1
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f8ca 	bl	800106c <LCD2_Write_Data>
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	3301      	adds	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	2b05      	cmp	r3, #5
 8000ee2:	d9ec      	bls.n	8000ebe <LCD2_Write_Char+0x16>
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	08002e6c 	.word	0x08002e6c

08000ef4 <LCD1_Write_String>:
 * Write a string to LCD.
 * @param PosX X start point
 * @param PosY Y start point
 * @param str  string to write.
 */
void LCD1_Write_String(uint8_t PosX, uint8_t PosY, char * str) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	603a      	str	r2, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	460b      	mov	r3, r1
 8000f02:	71bb      	strb	r3, [r7, #6]
  LCD1_Set_Postion(PosX, PosY);
 8000f04:	79ba      	ldrb	r2, [r7, #6]
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff30 	bl	8000d70 <LCD1_Set_Postion>
  while(* str) {
 8000f10:	e007      	b.n	8000f22 <LCD1_Write_String+0x2e>
    LCD1_Write_Char(* str);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ffa0 	bl	8000e5c <LCD1_Write_Char>
    str ++;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	603b      	str	r3, [r7, #0]
  while(* str) {
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f3      	bne.n	8000f12 <LCD1_Write_String+0x1e>
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <LCD2_Write_String>:

void LCD2_Write_String(uint8_t PosX, uint8_t PosY, char * str) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	603a      	str	r2, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	460b      	mov	r3, r1
 8000f42:	71bb      	strb	r3, [r7, #6]
  LCD2_Set_Postion(PosX, PosY);
 8000f44:	79ba      	ldrb	r2, [r7, #6]
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff2a 	bl	8000da4 <LCD2_Set_Postion>
  while(* str) {
 8000f50:	e007      	b.n	8000f62 <LCD2_Write_String+0x2e>
    LCD2_Write_Char(* str);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ffa6 	bl	8000ea8 <LCD2_Write_Char>
    str ++;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	603b      	str	r3, [r7, #0]
  while(* str) {
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f3      	bne.n	8000f52 <LCD2_Write_String+0x1e>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <LCD1_Write_Command>:

/**
 * Write LCD command to SPI
 * @param cmd command to write.
 */
void LCD1_Write_Command(uint8_t cmd) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD1_CE_PORT, LCD1_CE_PIN, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2108      	movs	r1, #8
 8000f82:	480e      	ldr	r0, [pc, #56]	; (8000fbc <LCD1_Write_Command+0x48>)
 8000f84:	f000 fbc9 	bl	800171a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD1_DC_PORT, LCD1_DC_PIN, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <LCD1_Write_Command+0x48>)
 8000f8e:	f000 fbc4 	bl	800171a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD1_SPI_INTERFACE, &cmd, 0x01, 1000);
 8000f92:	1df9      	adds	r1, r7, #7
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <LCD1_Write_Command+0x4c>)
 8000f9c:	f001 f842 	bl	8002024 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD1_CE_PORT, LCD1_CE_PIN, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2108      	movs	r1, #8
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <LCD1_Write_Command+0x48>)
 8000fa6:	f000 fbb8 	bl	800171a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD1_DC_PORT, LCD1_DC_PIN, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2110      	movs	r1, #16
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <LCD1_Write_Command+0x48>)
 8000fb0:	f000 fbb3 	bl	800171a <HAL_GPIO_WritePin>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40010800 	.word	0x40010800
 8000fc0:	200000d0 	.word	0x200000d0

08000fc4 <LCD2_Write_Command>:

void LCD2_Write_Command(uint8_t cmd) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD2_CE_PORT, LCD2_CE_PIN, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd4:	480f      	ldr	r0, [pc, #60]	; (8001014 <LCD2_Write_Command+0x50>)
 8000fd6:	f000 fba0 	bl	800171a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD2_DC_PORT, LCD2_DC_PIN, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <LCD2_Write_Command+0x50>)
 8000fe2:	f000 fb9a 	bl	800171a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD2_SPI_INTERFACE, &cmd, 0x01, 1000);
 8000fe6:	1df9      	adds	r1, r7, #7
 8000fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fec:	2201      	movs	r2, #1
 8000fee:	480a      	ldr	r0, [pc, #40]	; (8001018 <LCD2_Write_Command+0x54>)
 8000ff0:	f001 f818 	bl	8002024 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD2_CE_PORT, LCD2_CE_PIN, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <LCD2_Write_Command+0x50>)
 8000ffc:	f000 fb8d 	bl	800171a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD2_DC_PORT, LCD2_DC_PIN, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <LCD2_Write_Command+0x50>)
 8001008:	f000 fb87 	bl	800171a <HAL_GPIO_WritePin>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40010800 	.word	0x40010800
 8001018:	20000128 	.word	0x20000128

0800101c <LCD1_Write_Data>:

/**
 * Write LCD data to SPI
 * @param data data to write.
 */
void LCD1_Write_Data(uint8_t data) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD1_CE_PORT, LCD1_CE_PIN, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2108      	movs	r1, #8
 800102a:	480e      	ldr	r0, [pc, #56]	; (8001064 <LCD1_Write_Data+0x48>)
 800102c:	f000 fb75 	bl	800171a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD1_DC_PORT, LCD1_DC_PIN, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	2110      	movs	r1, #16
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <LCD1_Write_Data+0x48>)
 8001036:	f000 fb70 	bl	800171a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD1_SPI_INTERFACE, &data, 0x01, 1000);
 800103a:	1df9      	adds	r1, r7, #7
 800103c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001040:	2201      	movs	r2, #1
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <LCD1_Write_Data+0x4c>)
 8001044:	f000 ffee 	bl	8002024 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD1_CE_PORT, LCD1_CE_PIN, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2108      	movs	r1, #8
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <LCD1_Write_Data+0x48>)
 800104e:	f000 fb64 	bl	800171a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD1_DC_PORT, LCD1_DC_PIN, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2110      	movs	r1, #16
 8001056:	4803      	ldr	r0, [pc, #12]	; (8001064 <LCD1_Write_Data+0x48>)
 8001058:	f000 fb5f 	bl	800171a <HAL_GPIO_WritePin>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40010800 	.word	0x40010800
 8001068:	200000d0 	.word	0x200000d0

0800106c <LCD2_Write_Data>:

void LCD2_Write_Data(uint8_t data) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD2_CE_PORT, LCD2_CE_PIN, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107c:	480f      	ldr	r0, [pc, #60]	; (80010bc <LCD2_Write_Data+0x50>)
 800107e:	f000 fb4c 	bl	800171a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD2_DC_PORT, LCD2_DC_PIN, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <LCD2_Write_Data+0x50>)
 800108a:	f000 fb46 	bl	800171a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD2_SPI_INTERFACE, &data, 0x01, 1000);
 800108e:	1df9      	adds	r1, r7, #7
 8001090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001094:	2201      	movs	r2, #1
 8001096:	480a      	ldr	r0, [pc, #40]	; (80010c0 <LCD2_Write_Data+0x54>)
 8001098:	f000 ffc4 	bl	8002024 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD2_CE_PORT, LCD2_CE_PIN, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <LCD2_Write_Data+0x50>)
 80010a4:	f000 fb39 	bl	800171a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD2_DC_PORT, LCD2_DC_PIN, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ae:	4803      	ldr	r0, [pc, #12]	; (80010bc <LCD2_Write_Data+0x50>)
 80010b0:	f000 fb33 	bl	800171a <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40010800 	.word	0x40010800
 80010c0:	20000128 	.word	0x20000128

080010c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010c6:	490d      	ldr	r1, [pc, #52]	; (80010fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010dc:	4c0a      	ldr	r4, [pc, #40]	; (8001108 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ea:	f7ff fde9 	bl	8000cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ee:	f001 f981 	bl	80023f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f2:	f7ff f82b 	bl	800014c <main>
  bx lr
 80010f6:	4770      	bx	lr
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001100:	080030d0 	.word	0x080030d0
  ldr r2, =_sbss
 8001104:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001108:	200001b8 	.word	0x200001b8

0800110c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC1_2_IRQHandler>
	...

08001110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_Init+0x28>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_Init+0x28>)
 800111a:	f043 0310 	orr.w	r3, r3, #16
 800111e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f92b 	bl	800137c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001126:	200f      	movs	r0, #15
 8001128:	f000 f808 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f7ff fcb2 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40022000 	.word	0x40022000

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x54>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x58>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f935 	bl	80013ca <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 f90b 	bl	8001392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_InitTick+0x5c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000010 	.word	0x20000010
 8001194:	20000018 	.word	0x20000018
 8001198:	20000014 	.word	0x20000014

0800119c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_IncTick+0x1c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_IncTick+0x20>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a03      	ldr	r2, [pc, #12]	; (80011bc <HAL_IncTick+0x20>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	20000018 	.word	0x20000018
 80011bc:	200001a4 	.word	0x200001a4

080011c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b02      	ldr	r3, [pc, #8]	; (80011d0 <HAL_GetTick+0x10>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	200001a4 	.word	0x200001a4

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff fff0 	bl	80011c0 <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_Delay+0x44>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffe0 	bl	80011c0 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000018 	.word	0x20000018

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001348:	d301      	bcc.n	800134e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2301      	movs	r3, #1
 800134c:	e00f      	b.n	800136e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <SysTick_Config+0x40>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001356:	210f      	movs	r1, #15
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f7ff ff90 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Config+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SysTick_Config+0x40>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff49 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff5e 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff90 	bl	80012d4 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5f 	bl	8001280 <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ffb0 	bl	8001338 <SysTick_Config>
 80013d8:	4603      	mov	r3, r0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b08b      	sub	sp, #44	; 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f6:	e169      	b.n	80016cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013f8:	2201      	movs	r2, #1
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	429a      	cmp	r2, r3
 8001412:	f040 8158 	bne.w	80016c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a9a      	ldr	r2, [pc, #616]	; (8001684 <HAL_GPIO_Init+0x2a0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d05e      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001420:	4a98      	ldr	r2, [pc, #608]	; (8001684 <HAL_GPIO_Init+0x2a0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d875      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001426:	4a98      	ldr	r2, [pc, #608]	; (8001688 <HAL_GPIO_Init+0x2a4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d058      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 800142c:	4a96      	ldr	r2, [pc, #600]	; (8001688 <HAL_GPIO_Init+0x2a4>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d86f      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001432:	4a96      	ldr	r2, [pc, #600]	; (800168c <HAL_GPIO_Init+0x2a8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d052      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001438:	4a94      	ldr	r2, [pc, #592]	; (800168c <HAL_GPIO_Init+0x2a8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d869      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800143e:	4a94      	ldr	r2, [pc, #592]	; (8001690 <HAL_GPIO_Init+0x2ac>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d04c      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001444:	4a92      	ldr	r2, [pc, #584]	; (8001690 <HAL_GPIO_Init+0x2ac>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d863      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800144a:	4a92      	ldr	r2, [pc, #584]	; (8001694 <HAL_GPIO_Init+0x2b0>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d046      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001450:	4a90      	ldr	r2, [pc, #576]	; (8001694 <HAL_GPIO_Init+0x2b0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d85d      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001456:	2b12      	cmp	r3, #18
 8001458:	d82a      	bhi.n	80014b0 <HAL_GPIO_Init+0xcc>
 800145a:	2b12      	cmp	r3, #18
 800145c:	d859      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800145e:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <HAL_GPIO_Init+0x80>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	080014df 	.word	0x080014df
 8001468:	080014b9 	.word	0x080014b9
 800146c:	080014cb 	.word	0x080014cb
 8001470:	0800150d 	.word	0x0800150d
 8001474:	08001513 	.word	0x08001513
 8001478:	08001513 	.word	0x08001513
 800147c:	08001513 	.word	0x08001513
 8001480:	08001513 	.word	0x08001513
 8001484:	08001513 	.word	0x08001513
 8001488:	08001513 	.word	0x08001513
 800148c:	08001513 	.word	0x08001513
 8001490:	08001513 	.word	0x08001513
 8001494:	08001513 	.word	0x08001513
 8001498:	08001513 	.word	0x08001513
 800149c:	08001513 	.word	0x08001513
 80014a0:	08001513 	.word	0x08001513
 80014a4:	08001513 	.word	0x08001513
 80014a8:	080014c1 	.word	0x080014c1
 80014ac:	080014d5 	.word	0x080014d5
 80014b0:	4a79      	ldr	r2, [pc, #484]	; (8001698 <HAL_GPIO_Init+0x2b4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014b6:	e02c      	b.n	8001512 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e029      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	3304      	adds	r3, #4
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e024      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	3308      	adds	r3, #8
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e01f      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	330c      	adds	r3, #12
 80014da:	623b      	str	r3, [r7, #32]
          break;
 80014dc:	e01a      	b.n	8001514 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014e6:	2304      	movs	r3, #4
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e013      	b.n	8001514 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d105      	bne.n	8001500 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f4:	2308      	movs	r3, #8
 80014f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	611a      	str	r2, [r3, #16]
          break;
 80014fe:	e009      	b.n	8001514 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001500:	2308      	movs	r3, #8
 8001502:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	615a      	str	r2, [r3, #20]
          break;
 800150a:	e003      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x130>
          break;
 8001512:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2bff      	cmp	r3, #255	; 0xff
 8001518:	d801      	bhi.n	800151e <HAL_GPIO_Init+0x13a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	e001      	b.n	8001522 <HAL_GPIO_Init+0x13e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3304      	adds	r3, #4
 8001522:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2bff      	cmp	r3, #255	; 0xff
 8001528:	d802      	bhi.n	8001530 <HAL_GPIO_Init+0x14c>
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0x152>
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	3b08      	subs	r3, #8
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	210f      	movs	r1, #15
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	401a      	ands	r2, r3
 8001548:	6a39      	ldr	r1, [r7, #32]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	431a      	orrs	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80b1 	beq.w	80016c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001564:	4b4d      	ldr	r3, [pc, #308]	; (800169c <HAL_GPIO_Init+0x2b8>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a4c      	ldr	r2, [pc, #304]	; (800169c <HAL_GPIO_Init+0x2b8>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b4a      	ldr	r3, [pc, #296]	; (800169c <HAL_GPIO_Init+0x2b8>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800157c:	4a48      	ldr	r2, [pc, #288]	; (80016a0 <HAL_GPIO_Init+0x2bc>)
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001588:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a40      	ldr	r2, [pc, #256]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d013      	beq.n	80015d0 <HAL_GPIO_Init+0x1ec>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a3f      	ldr	r2, [pc, #252]	; (80016a8 <HAL_GPIO_Init+0x2c4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d00d      	beq.n	80015cc <HAL_GPIO_Init+0x1e8>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a3e      	ldr	r2, [pc, #248]	; (80016ac <HAL_GPIO_Init+0x2c8>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d007      	beq.n	80015c8 <HAL_GPIO_Init+0x1e4>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a3d      	ldr	r2, [pc, #244]	; (80016b0 <HAL_GPIO_Init+0x2cc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d101      	bne.n	80015c4 <HAL_GPIO_Init+0x1e0>
 80015c0:	2303      	movs	r3, #3
 80015c2:	e006      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015c4:	2304      	movs	r3, #4
 80015c6:	e004      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e002      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015d0:	2300      	movs	r3, #0
 80015d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d4:	f002 0203 	and.w	r2, r2, #3
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	4093      	lsls	r3, r2
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e2:	492f      	ldr	r1, [pc, #188]	; (80016a0 <HAL_GPIO_Init+0x2bc>)
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015fc:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	492c      	ldr	r1, [pc, #176]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	43db      	mvns	r3, r3
 8001612:	4928      	ldr	r1, [pc, #160]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001614:	4013      	ands	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	4922      	ldr	r1, [pc, #136]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	43db      	mvns	r3, r3
 800163a:	491e      	ldr	r1, [pc, #120]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800163c:	4013      	ands	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	4918      	ldr	r1, [pc, #96]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	43db      	mvns	r3, r3
 8001662:	4914      	ldr	r1, [pc, #80]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001664:	4013      	ands	r3, r2
 8001666:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d021      	beq.n	80016b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	490e      	ldr	r1, [pc, #56]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	60cb      	str	r3, [r1, #12]
 8001680:	e021      	b.n	80016c6 <HAL_GPIO_Init+0x2e2>
 8001682:	bf00      	nop
 8001684:	10320000 	.word	0x10320000
 8001688:	10310000 	.word	0x10310000
 800168c:	10220000 	.word	0x10220000
 8001690:	10210000 	.word	0x10210000
 8001694:	10120000 	.word	0x10120000
 8001698:	10110000 	.word	0x10110000
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010000 	.word	0x40010000
 80016a4:	40010800 	.word	0x40010800
 80016a8:	40010c00 	.word	0x40010c00
 80016ac:	40011000 	.word	0x40011000
 80016b0:	40011400 	.word	0x40011400
 80016b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_GPIO_Init+0x304>)
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	43db      	mvns	r3, r3
 80016c0:	4909      	ldr	r1, [pc, #36]	; (80016e8 <HAL_GPIO_Init+0x304>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	3301      	adds	r3, #1
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	fa22 f303 	lsr.w	r3, r2, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f47f ae8e 	bne.w	80013f8 <HAL_GPIO_Init+0x14>
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	372c      	adds	r7, #44	; 0x2c
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	40010400 	.word	0x40010400

080016ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	887b      	ldrh	r3, [r7, #2]
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	e001      	b.n	800170e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	807b      	strh	r3, [r7, #2]
 8001726:	4613      	mov	r3, r2
 8001728:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800172a:	787b      	ldrb	r3, [r7, #1]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001730:	887a      	ldrh	r2, [r7, #2]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001736:	e003      	b.n	8001740 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	041a      	lsls	r2, r3, #16
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	611a      	str	r2, [r3, #16]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
	...

0800174c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e272      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8087 	beq.w	800187a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800176c:	4b92      	ldr	r3, [pc, #584]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b04      	cmp	r3, #4
 8001776:	d00c      	beq.n	8001792 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001778:	4b8f      	ldr	r3, [pc, #572]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b08      	cmp	r3, #8
 8001782:	d112      	bne.n	80017aa <HAL_RCC_OscConfig+0x5e>
 8001784:	4b8c      	ldr	r3, [pc, #560]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001790:	d10b      	bne.n	80017aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001792:	4b89      	ldr	r3, [pc, #548]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d06c      	beq.n	8001878 <HAL_RCC_OscConfig+0x12c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d168      	bne.n	8001878 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e24c      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x76>
 80017b4:	4b80      	ldr	r3, [pc, #512]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a7f      	ldr	r2, [pc, #508]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e02e      	b.n	8001820 <HAL_RCC_OscConfig+0xd4>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x98>
 80017ca:	4b7b      	ldr	r3, [pc, #492]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a7a      	ldr	r2, [pc, #488]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a77      	ldr	r2, [pc, #476]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e01d      	b.n	8001820 <HAL_RCC_OscConfig+0xd4>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0xbc>
 80017ee:	4b72      	ldr	r3, [pc, #456]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a71      	ldr	r2, [pc, #452]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b6f      	ldr	r3, [pc, #444]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6e      	ldr	r2, [pc, #440]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0xd4>
 8001808:	4b6b      	ldr	r3, [pc, #428]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a6a      	ldr	r2, [pc, #424]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800180e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a67      	ldr	r2, [pc, #412]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800181a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d013      	beq.n	8001850 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fcca 	bl	80011c0 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fcc6 	bl	80011c0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e200      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b5d      	ldr	r3, [pc, #372]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0xe4>
 800184e:	e014      	b.n	800187a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fcb6 	bl	80011c0 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff fcb2 	bl	80011c0 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e1ec      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x10c>
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d063      	beq.n	800194e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001886:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00b      	beq.n	80018aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001892:	4b49      	ldr	r3, [pc, #292]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	2b08      	cmp	r3, #8
 800189c:	d11c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x18c>
 800189e:	4b46      	ldr	r3, [pc, #280]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d116      	bne.n	80018d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x176>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e1c0      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c2:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4939      	ldr	r1, [pc, #228]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d6:	e03a      	b.n	800194e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d020      	beq.n	8001922 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e0:	4b36      	ldr	r3, [pc, #216]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e6:	f7ff fc6b 	bl	80011c0 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ee:	f7ff fc67 	bl	80011c0 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e1a1      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001900:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4927      	ldr	r1, [pc, #156]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 800191c:	4313      	orrs	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
 8001920:	e015      	b.n	800194e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001922:	4b26      	ldr	r3, [pc, #152]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff fc4a 	bl	80011c0 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff fc46 	bl	80011c0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e180      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001942:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d03a      	beq.n	80019d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d019      	beq.n	8001996 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001968:	f7ff fc2a 	bl	80011c0 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001970:	f7ff fc26 	bl	80011c0 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e160      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_RCC_OscConfig+0x26c>)
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800198e:	2001      	movs	r0, #1
 8001990:	f000 faa6 	bl	8001ee0 <RCC_Delay>
 8001994:	e01c      	b.n	80019d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_RCC_OscConfig+0x274>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7ff fc10 	bl	80011c0 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a2:	e00f      	b.n	80019c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff fc0c 	bl	80011c0 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d908      	bls.n	80019c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e146      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	42420000 	.word	0x42420000
 80019c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c4:	4b92      	ldr	r3, [pc, #584]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1e9      	bne.n	80019a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80a6 	beq.w	8001b2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e2:	4b8b      	ldr	r3, [pc, #556]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10d      	bne.n	8001a0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b88      	ldr	r3, [pc, #544]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a87      	ldr	r2, [pc, #540]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f8:	61d3      	str	r3, [r2, #28]
 80019fa:	4b85      	ldr	r3, [pc, #532]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0a:	4b82      	ldr	r3, [pc, #520]	; (8001c14 <HAL_RCC_OscConfig+0x4c8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d118      	bne.n	8001a48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a16:	4b7f      	ldr	r3, [pc, #508]	; (8001c14 <HAL_RCC_OscConfig+0x4c8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a7e      	ldr	r2, [pc, #504]	; (8001c14 <HAL_RCC_OscConfig+0x4c8>)
 8001a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a22:	f7ff fbcd 	bl	80011c0 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2a:	f7ff fbc9 	bl	80011c0 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b64      	cmp	r3, #100	; 0x64
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e103      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	4b75      	ldr	r3, [pc, #468]	; (8001c14 <HAL_RCC_OscConfig+0x4c8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x312>
 8001a50:	4b6f      	ldr	r3, [pc, #444]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4a6e      	ldr	r2, [pc, #440]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6213      	str	r3, [r2, #32]
 8001a5c:	e02d      	b.n	8001aba <HAL_RCC_OscConfig+0x36e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x334>
 8001a66:	4b6a      	ldr	r3, [pc, #424]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4a69      	ldr	r2, [pc, #420]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	6213      	str	r3, [r2, #32]
 8001a72:	4b67      	ldr	r3, [pc, #412]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	4a66      	ldr	r2, [pc, #408]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	f023 0304 	bic.w	r3, r3, #4
 8001a7c:	6213      	str	r3, [r2, #32]
 8001a7e:	e01c      	b.n	8001aba <HAL_RCC_OscConfig+0x36e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d10c      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x356>
 8001a88:	4b61      	ldr	r3, [pc, #388]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4a60      	ldr	r2, [pc, #384]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6213      	str	r3, [r2, #32]
 8001a94:	4b5e      	ldr	r3, [pc, #376]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4a5d      	ldr	r2, [pc, #372]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6213      	str	r3, [r2, #32]
 8001aa0:	e00b      	b.n	8001aba <HAL_RCC_OscConfig+0x36e>
 8001aa2:	4b5b      	ldr	r3, [pc, #364]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	4a5a      	ldr	r2, [pc, #360]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6213      	str	r3, [r2, #32]
 8001aae:	4b58      	ldr	r3, [pc, #352]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4a57      	ldr	r2, [pc, #348]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	f023 0304 	bic.w	r3, r3, #4
 8001ab8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d015      	beq.n	8001aee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fb7d 	bl	80011c0 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff fb79 	bl	80011c0 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e0b1      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	4b4b      	ldr	r3, [pc, #300]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ee      	beq.n	8001aca <HAL_RCC_OscConfig+0x37e>
 8001aec:	e014      	b.n	8001b18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fb67 	bl	80011c0 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff fb63 	bl	80011c0 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e09b      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0c:	4b40      	ldr	r3, [pc, #256]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1ee      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d105      	bne.n	8001b2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1e:	4b3c      	ldr	r3, [pc, #240]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a3b      	ldr	r2, [pc, #236]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 8087 	beq.w	8001c42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d061      	beq.n	8001c04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d146      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b48:	4b33      	ldr	r3, [pc, #204]	; (8001c18 <HAL_RCC_OscConfig+0x4cc>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fb37 	bl	80011c0 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff fb33 	bl	80011c0 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e06d      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b68:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7c:	d108      	bne.n	8001b90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b7e:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	4921      	ldr	r1, [pc, #132]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b90:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a19      	ldr	r1, [r3, #32]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	491b      	ldr	r1, [pc, #108]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_RCC_OscConfig+0x4cc>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bae:	f7ff fb07 	bl	80011c0 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb6:	f7ff fb03 	bl	80011c0 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e03d      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x46a>
 8001bd4:	e035      	b.n	8001c42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_RCC_OscConfig+0x4cc>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff faf0 	bl	80011c0 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff faec 	bl	80011c0 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e026      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x498>
 8001c02:	e01e      	b.n	8001c42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d107      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e019      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40007000 	.word	0x40007000
 8001c18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_OscConfig+0x500>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000

08001c50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0d0      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c64:	4b6a      	ldr	r3, [pc, #424]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d910      	bls.n	8001c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c72:	4b67      	ldr	r3, [pc, #412]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 0207 	bic.w	r2, r3, #7
 8001c7a:	4965      	ldr	r1, [pc, #404]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c82:	4b63      	ldr	r3, [pc, #396]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0b8      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d020      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cac:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a58      	ldr	r2, [pc, #352]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc4:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4a52      	ldr	r2, [pc, #328]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd0:	4b50      	ldr	r3, [pc, #320]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	494d      	ldr	r1, [pc, #308]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d040      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d115      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e07f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0e:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e073      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e06b      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2e:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f023 0203 	bic.w	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4936      	ldr	r1, [pc, #216]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d40:	f7ff fa3e 	bl	80011c0 <HAL_GetTick>
 8001d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	e00a      	b.n	8001d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d48:	f7ff fa3a 	bl	80011c0 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e053      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 020c 	and.w	r2, r3, #12
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d1eb      	bne.n	8001d48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d210      	bcs.n	8001da0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 0207 	bic.w	r2, r3, #7
 8001d86:	4922      	ldr	r1, [pc, #136]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e032      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4916      	ldr	r1, [pc, #88]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	490e      	ldr	r1, [pc, #56]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dde:	f000 f821 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	490a      	ldr	r1, [pc, #40]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001df0:	5ccb      	ldrb	r3, [r1, r3]
 8001df2:	fa22 f303 	lsr.w	r3, r2, r3
 8001df6:	4a09      	ldr	r2, [pc, #36]	; (8001e1c <HAL_RCC_ClockConfig+0x1cc>)
 8001df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_ClockConfig+0x1d0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f99c 	bl	800113c <HAL_InitTick>

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40022000 	.word	0x40022000
 8001e14:	40021000 	.word	0x40021000
 8001e18:	08002e5c 	.word	0x08002e5c
 8001e1c:	20000010 	.word	0x20000010
 8001e20:	20000014 	.word	0x20000014

08001e24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e24:	b490      	push	{r4, r7}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e2a:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001e2c:	1d3c      	adds	r4, r7, #4
 8001e2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e34:	f240 2301 	movw	r3, #513	; 0x201
 8001e38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e4e:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d002      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0x40>
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d003      	beq.n	8001e6a <HAL_RCC_GetSysClockFreq+0x46>
 8001e62:	e02b      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e66:	623b      	str	r3, [r7, #32]
      break;
 8001e68:	e02b      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	0c9b      	lsrs	r3, r3, #18
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3328      	adds	r3, #40	; 0x28
 8001e74:	443b      	add	r3, r7
 8001e76:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e7a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d012      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e86:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	0c5b      	lsrs	r3, r3, #17
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	3328      	adds	r3, #40	; 0x28
 8001e92:	443b      	add	r3, r7
 8001e94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e9e:	fb03 f202 	mul.w	r2, r3, r2
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eaa:	e004      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	4a0b      	ldr	r2, [pc, #44]	; (8001edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	623b      	str	r3, [r7, #32]
      break;
 8001eba:	e002      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ebe:	623b      	str	r3, [r7, #32]
      break;
 8001ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3728      	adds	r7, #40	; 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc90      	pop	{r4, r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	08002e4c 	.word	0x08002e4c
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	007a1200 	.word	0x007a1200
 8001edc:	003d0900 	.word	0x003d0900

08001ee0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <RCC_Delay+0x34>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <RCC_Delay+0x38>)
 8001eee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef2:	0a5b      	lsrs	r3, r3, #9
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001efc:	bf00      	nop
  }
  while (Delay --);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1e5a      	subs	r2, r3, #1
 8001f02:	60fa      	str	r2, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f9      	bne.n	8001efc <RCC_Delay+0x1c>
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	20000010 	.word	0x20000010
 8001f18:	10624dd3 	.word	0x10624dd3

08001f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e076      	b.n	800201c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d108      	bne.n	8001f48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f3e:	d009      	beq.n	8001f54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
 8001f46:	e005      	b.n	8001f54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe fdc2 	bl	8000af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	ea42 0103 	orr.w	r1, r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	0c1a      	lsrs	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f002 0204 	and.w	r2, r2, #4
 8001ffa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69da      	ldr	r2, [r3, #28]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_SPI_Transmit+0x22>
 8002042:	2302      	movs	r3, #2
 8002044:	e126      	b.n	8002294 <HAL_SPI_Transmit+0x270>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800204e:	f7ff f8b7 	bl	80011c0 <HAL_GetTick>
 8002052:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d002      	beq.n	800206a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002064:	2302      	movs	r3, #2
 8002066:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002068:	e10b      	b.n	8002282 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_SPI_Transmit+0x52>
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	77fb      	strb	r3, [r7, #31]
    goto error;
 800207a:	e102      	b.n	8002282 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2203      	movs	r2, #3
 8002080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	88fa      	ldrh	r2, [r7, #6]
 8002094:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	88fa      	ldrh	r2, [r7, #6]
 800209a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c2:	d10f      	bne.n	80020e4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	2b40      	cmp	r3, #64	; 0x40
 80020f0:	d007      	beq.n	8002102 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002100:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800210a:	d14b      	bne.n	80021a4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <HAL_SPI_Transmit+0xf6>
 8002114:	8afb      	ldrh	r3, [r7, #22]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d13e      	bne.n	8002198 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	881a      	ldrh	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	1c9a      	adds	r2, r3, #2
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002134:	b29b      	uxth	r3, r3
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800213e:	e02b      	b.n	8002198 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b02      	cmp	r3, #2
 800214c:	d112      	bne.n	8002174 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	881a      	ldrh	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	1c9a      	adds	r2, r3, #2
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	86da      	strh	r2, [r3, #54]	; 0x36
 8002172:	e011      	b.n	8002198 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002174:	f7ff f824 	bl	80011c0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d803      	bhi.n	800218c <HAL_SPI_Transmit+0x168>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218a:	d102      	bne.n	8002192 <HAL_SPI_Transmit+0x16e>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d102      	bne.n	8002198 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002196:	e074      	b.n	8002282 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1ce      	bne.n	8002140 <HAL_SPI_Transmit+0x11c>
 80021a2:	e04c      	b.n	800223e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_SPI_Transmit+0x18e>
 80021ac:	8afb      	ldrh	r3, [r7, #22]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d140      	bne.n	8002234 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	330c      	adds	r3, #12
 80021bc:	7812      	ldrb	r2, [r2, #0]
 80021be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021d8:	e02c      	b.n	8002234 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d113      	bne.n	8002210 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	330c      	adds	r3, #12
 80021f2:	7812      	ldrb	r2, [r2, #0]
 80021f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	86da      	strh	r2, [r3, #54]	; 0x36
 800220e:	e011      	b.n	8002234 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002210:	f7fe ffd6 	bl	80011c0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d803      	bhi.n	8002228 <HAL_SPI_Transmit+0x204>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002226:	d102      	bne.n	800222e <HAL_SPI_Transmit+0x20a>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002232:	e026      	b.n	8002282 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1cd      	bne.n	80021da <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	6839      	ldr	r1, [r7, #0]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f8b2 	bl	80023ac <SPI_EndRxTxTransaction>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2220      	movs	r2, #32
 8002252:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10a      	bne.n	8002272 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	77fb      	strb	r3, [r7, #31]
 800227e:	e000      	b.n	8002282 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002280:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002292:	7ffb      	ldrb	r3, [r7, #31]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	4613      	mov	r3, r2
 80022aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022ac:	f7fe ff88 	bl	80011c0 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	4413      	add	r3, r2
 80022ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022bc:	f7fe ff80 	bl	80011c0 <HAL_GetTick>
 80022c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022c2:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	015b      	lsls	r3, r3, #5
 80022c8:	0d1b      	lsrs	r3, r3, #20
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	fb02 f303 	mul.w	r3, r2, r3
 80022d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022d2:	e054      	b.n	800237e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022da:	d050      	beq.n	800237e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022dc:	f7fe ff70 	bl	80011c0 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d902      	bls.n	80022f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d13d      	bne.n	800236e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002300:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800230a:	d111      	bne.n	8002330 <SPI_WaitFlagStateUntilTimeout+0x94>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002314:	d004      	beq.n	8002320 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231e:	d107      	bne.n	8002330 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800232e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002338:	d10f      	bne.n	800235a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002358:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e017      	b.n	800239e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3b01      	subs	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4013      	ands	r3, r2
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	429a      	cmp	r2, r3
 800238c:	bf0c      	ite	eq
 800238e:	2301      	moveq	r3, #1
 8002390:	2300      	movne	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	429a      	cmp	r2, r3
 800239a:	d19b      	bne.n	80022d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000010 	.word	0x20000010

080023ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	2180      	movs	r1, #128	; 0x80
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f7ff ff6a 	bl	800229c <SPI_WaitFlagStateUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d2:	f043 0220 	orr.w	r2, r3, #32
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e000      	b.n	80023e0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <__errno>:
 80023e8:	4b01      	ldr	r3, [pc, #4]	; (80023f0 <__errno+0x8>)
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	2000001c 	.word	0x2000001c

080023f4 <__libc_init_array>:
 80023f4:	b570      	push	{r4, r5, r6, lr}
 80023f6:	2600      	movs	r6, #0
 80023f8:	4d0c      	ldr	r5, [pc, #48]	; (800242c <__libc_init_array+0x38>)
 80023fa:	4c0d      	ldr	r4, [pc, #52]	; (8002430 <__libc_init_array+0x3c>)
 80023fc:	1b64      	subs	r4, r4, r5
 80023fe:	10a4      	asrs	r4, r4, #2
 8002400:	42a6      	cmp	r6, r4
 8002402:	d109      	bne.n	8002418 <__libc_init_array+0x24>
 8002404:	f000 fc9c 	bl	8002d40 <_init>
 8002408:	2600      	movs	r6, #0
 800240a:	4d0a      	ldr	r5, [pc, #40]	; (8002434 <__libc_init_array+0x40>)
 800240c:	4c0a      	ldr	r4, [pc, #40]	; (8002438 <__libc_init_array+0x44>)
 800240e:	1b64      	subs	r4, r4, r5
 8002410:	10a4      	asrs	r4, r4, #2
 8002412:	42a6      	cmp	r6, r4
 8002414:	d105      	bne.n	8002422 <__libc_init_array+0x2e>
 8002416:	bd70      	pop	{r4, r5, r6, pc}
 8002418:	f855 3b04 	ldr.w	r3, [r5], #4
 800241c:	4798      	blx	r3
 800241e:	3601      	adds	r6, #1
 8002420:	e7ee      	b.n	8002400 <__libc_init_array+0xc>
 8002422:	f855 3b04 	ldr.w	r3, [r5], #4
 8002426:	4798      	blx	r3
 8002428:	3601      	adds	r6, #1
 800242a:	e7f2      	b.n	8002412 <__libc_init_array+0x1e>
 800242c:	080030c8 	.word	0x080030c8
 8002430:	080030c8 	.word	0x080030c8
 8002434:	080030c8 	.word	0x080030c8
 8002438:	080030cc 	.word	0x080030cc

0800243c <memset>:
 800243c:	4603      	mov	r3, r0
 800243e:	4402      	add	r2, r0
 8002440:	4293      	cmp	r3, r2
 8002442:	d100      	bne.n	8002446 <memset+0xa>
 8002444:	4770      	bx	lr
 8002446:	f803 1b01 	strb.w	r1, [r3], #1
 800244a:	e7f9      	b.n	8002440 <memset+0x4>

0800244c <siprintf>:
 800244c:	b40e      	push	{r1, r2, r3}
 800244e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002452:	b500      	push	{lr}
 8002454:	b09c      	sub	sp, #112	; 0x70
 8002456:	ab1d      	add	r3, sp, #116	; 0x74
 8002458:	9002      	str	r0, [sp, #8]
 800245a:	9006      	str	r0, [sp, #24]
 800245c:	9107      	str	r1, [sp, #28]
 800245e:	9104      	str	r1, [sp, #16]
 8002460:	4808      	ldr	r0, [pc, #32]	; (8002484 <siprintf+0x38>)
 8002462:	4909      	ldr	r1, [pc, #36]	; (8002488 <siprintf+0x3c>)
 8002464:	f853 2b04 	ldr.w	r2, [r3], #4
 8002468:	9105      	str	r1, [sp, #20]
 800246a:	6800      	ldr	r0, [r0, #0]
 800246c:	a902      	add	r1, sp, #8
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	f000 f868 	bl	8002544 <_svfiprintf_r>
 8002474:	2200      	movs	r2, #0
 8002476:	9b02      	ldr	r3, [sp, #8]
 8002478:	701a      	strb	r2, [r3, #0]
 800247a:	b01c      	add	sp, #112	; 0x70
 800247c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002480:	b003      	add	sp, #12
 8002482:	4770      	bx	lr
 8002484:	2000001c 	.word	0x2000001c
 8002488:	ffff0208 	.word	0xffff0208

0800248c <__ssputs_r>:
 800248c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002490:	688e      	ldr	r6, [r1, #8]
 8002492:	4682      	mov	sl, r0
 8002494:	429e      	cmp	r6, r3
 8002496:	460c      	mov	r4, r1
 8002498:	4690      	mov	r8, r2
 800249a:	461f      	mov	r7, r3
 800249c:	d838      	bhi.n	8002510 <__ssputs_r+0x84>
 800249e:	898a      	ldrh	r2, [r1, #12]
 80024a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80024a4:	d032      	beq.n	800250c <__ssputs_r+0x80>
 80024a6:	6825      	ldr	r5, [r4, #0]
 80024a8:	6909      	ldr	r1, [r1, #16]
 80024aa:	3301      	adds	r3, #1
 80024ac:	eba5 0901 	sub.w	r9, r5, r1
 80024b0:	6965      	ldr	r5, [r4, #20]
 80024b2:	444b      	add	r3, r9
 80024b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80024bc:	106d      	asrs	r5, r5, #1
 80024be:	429d      	cmp	r5, r3
 80024c0:	bf38      	it	cc
 80024c2:	461d      	movcc	r5, r3
 80024c4:	0553      	lsls	r3, r2, #21
 80024c6:	d531      	bpl.n	800252c <__ssputs_r+0xa0>
 80024c8:	4629      	mov	r1, r5
 80024ca:	f000 fb6f 	bl	8002bac <_malloc_r>
 80024ce:	4606      	mov	r6, r0
 80024d0:	b950      	cbnz	r0, 80024e8 <__ssputs_r+0x5c>
 80024d2:	230c      	movs	r3, #12
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	f8ca 3000 	str.w	r3, [sl]
 80024dc:	89a3      	ldrh	r3, [r4, #12]
 80024de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e2:	81a3      	strh	r3, [r4, #12]
 80024e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024e8:	464a      	mov	r2, r9
 80024ea:	6921      	ldr	r1, [r4, #16]
 80024ec:	f000 face 	bl	8002a8c <memcpy>
 80024f0:	89a3      	ldrh	r3, [r4, #12]
 80024f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80024f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024fa:	81a3      	strh	r3, [r4, #12]
 80024fc:	6126      	str	r6, [r4, #16]
 80024fe:	444e      	add	r6, r9
 8002500:	6026      	str	r6, [r4, #0]
 8002502:	463e      	mov	r6, r7
 8002504:	6165      	str	r5, [r4, #20]
 8002506:	eba5 0509 	sub.w	r5, r5, r9
 800250a:	60a5      	str	r5, [r4, #8]
 800250c:	42be      	cmp	r6, r7
 800250e:	d900      	bls.n	8002512 <__ssputs_r+0x86>
 8002510:	463e      	mov	r6, r7
 8002512:	4632      	mov	r2, r6
 8002514:	4641      	mov	r1, r8
 8002516:	6820      	ldr	r0, [r4, #0]
 8002518:	f000 fac6 	bl	8002aa8 <memmove>
 800251c:	68a3      	ldr	r3, [r4, #8]
 800251e:	2000      	movs	r0, #0
 8002520:	1b9b      	subs	r3, r3, r6
 8002522:	60a3      	str	r3, [r4, #8]
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	4433      	add	r3, r6
 8002528:	6023      	str	r3, [r4, #0]
 800252a:	e7db      	b.n	80024e4 <__ssputs_r+0x58>
 800252c:	462a      	mov	r2, r5
 800252e:	f000 fbb1 	bl	8002c94 <_realloc_r>
 8002532:	4606      	mov	r6, r0
 8002534:	2800      	cmp	r0, #0
 8002536:	d1e1      	bne.n	80024fc <__ssputs_r+0x70>
 8002538:	4650      	mov	r0, sl
 800253a:	6921      	ldr	r1, [r4, #16]
 800253c:	f000 face 	bl	8002adc <_free_r>
 8002540:	e7c7      	b.n	80024d2 <__ssputs_r+0x46>
	...

08002544 <_svfiprintf_r>:
 8002544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002548:	4698      	mov	r8, r3
 800254a:	898b      	ldrh	r3, [r1, #12]
 800254c:	4607      	mov	r7, r0
 800254e:	061b      	lsls	r3, r3, #24
 8002550:	460d      	mov	r5, r1
 8002552:	4614      	mov	r4, r2
 8002554:	b09d      	sub	sp, #116	; 0x74
 8002556:	d50e      	bpl.n	8002576 <_svfiprintf_r+0x32>
 8002558:	690b      	ldr	r3, [r1, #16]
 800255a:	b963      	cbnz	r3, 8002576 <_svfiprintf_r+0x32>
 800255c:	2140      	movs	r1, #64	; 0x40
 800255e:	f000 fb25 	bl	8002bac <_malloc_r>
 8002562:	6028      	str	r0, [r5, #0]
 8002564:	6128      	str	r0, [r5, #16]
 8002566:	b920      	cbnz	r0, 8002572 <_svfiprintf_r+0x2e>
 8002568:	230c      	movs	r3, #12
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	f04f 30ff 	mov.w	r0, #4294967295
 8002570:	e0d1      	b.n	8002716 <_svfiprintf_r+0x1d2>
 8002572:	2340      	movs	r3, #64	; 0x40
 8002574:	616b      	str	r3, [r5, #20]
 8002576:	2300      	movs	r3, #0
 8002578:	9309      	str	r3, [sp, #36]	; 0x24
 800257a:	2320      	movs	r3, #32
 800257c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002580:	2330      	movs	r3, #48	; 0x30
 8002582:	f04f 0901 	mov.w	r9, #1
 8002586:	f8cd 800c 	str.w	r8, [sp, #12]
 800258a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002730 <_svfiprintf_r+0x1ec>
 800258e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002592:	4623      	mov	r3, r4
 8002594:	469a      	mov	sl, r3
 8002596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800259a:	b10a      	cbz	r2, 80025a0 <_svfiprintf_r+0x5c>
 800259c:	2a25      	cmp	r2, #37	; 0x25
 800259e:	d1f9      	bne.n	8002594 <_svfiprintf_r+0x50>
 80025a0:	ebba 0b04 	subs.w	fp, sl, r4
 80025a4:	d00b      	beq.n	80025be <_svfiprintf_r+0x7a>
 80025a6:	465b      	mov	r3, fp
 80025a8:	4622      	mov	r2, r4
 80025aa:	4629      	mov	r1, r5
 80025ac:	4638      	mov	r0, r7
 80025ae:	f7ff ff6d 	bl	800248c <__ssputs_r>
 80025b2:	3001      	adds	r0, #1
 80025b4:	f000 80aa 	beq.w	800270c <_svfiprintf_r+0x1c8>
 80025b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025ba:	445a      	add	r2, fp
 80025bc:	9209      	str	r2, [sp, #36]	; 0x24
 80025be:	f89a 3000 	ldrb.w	r3, [sl]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80a2 	beq.w	800270c <_svfiprintf_r+0x1c8>
 80025c8:	2300      	movs	r3, #0
 80025ca:	f04f 32ff 	mov.w	r2, #4294967295
 80025ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025d2:	f10a 0a01 	add.w	sl, sl, #1
 80025d6:	9304      	str	r3, [sp, #16]
 80025d8:	9307      	str	r3, [sp, #28]
 80025da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025de:	931a      	str	r3, [sp, #104]	; 0x68
 80025e0:	4654      	mov	r4, sl
 80025e2:	2205      	movs	r2, #5
 80025e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025e8:	4851      	ldr	r0, [pc, #324]	; (8002730 <_svfiprintf_r+0x1ec>)
 80025ea:	f000 fa41 	bl	8002a70 <memchr>
 80025ee:	9a04      	ldr	r2, [sp, #16]
 80025f0:	b9d8      	cbnz	r0, 800262a <_svfiprintf_r+0xe6>
 80025f2:	06d0      	lsls	r0, r2, #27
 80025f4:	bf44      	itt	mi
 80025f6:	2320      	movmi	r3, #32
 80025f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025fc:	0711      	lsls	r1, r2, #28
 80025fe:	bf44      	itt	mi
 8002600:	232b      	movmi	r3, #43	; 0x2b
 8002602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002606:	f89a 3000 	ldrb.w	r3, [sl]
 800260a:	2b2a      	cmp	r3, #42	; 0x2a
 800260c:	d015      	beq.n	800263a <_svfiprintf_r+0xf6>
 800260e:	4654      	mov	r4, sl
 8002610:	2000      	movs	r0, #0
 8002612:	f04f 0c0a 	mov.w	ip, #10
 8002616:	9a07      	ldr	r2, [sp, #28]
 8002618:	4621      	mov	r1, r4
 800261a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800261e:	3b30      	subs	r3, #48	; 0x30
 8002620:	2b09      	cmp	r3, #9
 8002622:	d94e      	bls.n	80026c2 <_svfiprintf_r+0x17e>
 8002624:	b1b0      	cbz	r0, 8002654 <_svfiprintf_r+0x110>
 8002626:	9207      	str	r2, [sp, #28]
 8002628:	e014      	b.n	8002654 <_svfiprintf_r+0x110>
 800262a:	eba0 0308 	sub.w	r3, r0, r8
 800262e:	fa09 f303 	lsl.w	r3, r9, r3
 8002632:	4313      	orrs	r3, r2
 8002634:	46a2      	mov	sl, r4
 8002636:	9304      	str	r3, [sp, #16]
 8002638:	e7d2      	b.n	80025e0 <_svfiprintf_r+0x9c>
 800263a:	9b03      	ldr	r3, [sp, #12]
 800263c:	1d19      	adds	r1, r3, #4
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	9103      	str	r1, [sp, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	bfbb      	ittet	lt
 8002646:	425b      	neglt	r3, r3
 8002648:	f042 0202 	orrlt.w	r2, r2, #2
 800264c:	9307      	strge	r3, [sp, #28]
 800264e:	9307      	strlt	r3, [sp, #28]
 8002650:	bfb8      	it	lt
 8002652:	9204      	strlt	r2, [sp, #16]
 8002654:	7823      	ldrb	r3, [r4, #0]
 8002656:	2b2e      	cmp	r3, #46	; 0x2e
 8002658:	d10c      	bne.n	8002674 <_svfiprintf_r+0x130>
 800265a:	7863      	ldrb	r3, [r4, #1]
 800265c:	2b2a      	cmp	r3, #42	; 0x2a
 800265e:	d135      	bne.n	80026cc <_svfiprintf_r+0x188>
 8002660:	9b03      	ldr	r3, [sp, #12]
 8002662:	3402      	adds	r4, #2
 8002664:	1d1a      	adds	r2, r3, #4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	9203      	str	r2, [sp, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	bfb8      	it	lt
 800266e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002672:	9305      	str	r3, [sp, #20]
 8002674:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002734 <_svfiprintf_r+0x1f0>
 8002678:	2203      	movs	r2, #3
 800267a:	4650      	mov	r0, sl
 800267c:	7821      	ldrb	r1, [r4, #0]
 800267e:	f000 f9f7 	bl	8002a70 <memchr>
 8002682:	b140      	cbz	r0, 8002696 <_svfiprintf_r+0x152>
 8002684:	2340      	movs	r3, #64	; 0x40
 8002686:	eba0 000a 	sub.w	r0, r0, sl
 800268a:	fa03 f000 	lsl.w	r0, r3, r0
 800268e:	9b04      	ldr	r3, [sp, #16]
 8002690:	3401      	adds	r4, #1
 8002692:	4303      	orrs	r3, r0
 8002694:	9304      	str	r3, [sp, #16]
 8002696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800269a:	2206      	movs	r2, #6
 800269c:	4826      	ldr	r0, [pc, #152]	; (8002738 <_svfiprintf_r+0x1f4>)
 800269e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026a2:	f000 f9e5 	bl	8002a70 <memchr>
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d038      	beq.n	800271c <_svfiprintf_r+0x1d8>
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <_svfiprintf_r+0x1f8>)
 80026ac:	bb1b      	cbnz	r3, 80026f6 <_svfiprintf_r+0x1b2>
 80026ae:	9b03      	ldr	r3, [sp, #12]
 80026b0:	3307      	adds	r3, #7
 80026b2:	f023 0307 	bic.w	r3, r3, #7
 80026b6:	3308      	adds	r3, #8
 80026b8:	9303      	str	r3, [sp, #12]
 80026ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026bc:	4433      	add	r3, r6
 80026be:	9309      	str	r3, [sp, #36]	; 0x24
 80026c0:	e767      	b.n	8002592 <_svfiprintf_r+0x4e>
 80026c2:	460c      	mov	r4, r1
 80026c4:	2001      	movs	r0, #1
 80026c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80026ca:	e7a5      	b.n	8002618 <_svfiprintf_r+0xd4>
 80026cc:	2300      	movs	r3, #0
 80026ce:	f04f 0c0a 	mov.w	ip, #10
 80026d2:	4619      	mov	r1, r3
 80026d4:	3401      	adds	r4, #1
 80026d6:	9305      	str	r3, [sp, #20]
 80026d8:	4620      	mov	r0, r4
 80026da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026de:	3a30      	subs	r2, #48	; 0x30
 80026e0:	2a09      	cmp	r2, #9
 80026e2:	d903      	bls.n	80026ec <_svfiprintf_r+0x1a8>
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0c5      	beq.n	8002674 <_svfiprintf_r+0x130>
 80026e8:	9105      	str	r1, [sp, #20]
 80026ea:	e7c3      	b.n	8002674 <_svfiprintf_r+0x130>
 80026ec:	4604      	mov	r4, r0
 80026ee:	2301      	movs	r3, #1
 80026f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80026f4:	e7f0      	b.n	80026d8 <_svfiprintf_r+0x194>
 80026f6:	ab03      	add	r3, sp, #12
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	462a      	mov	r2, r5
 80026fc:	4638      	mov	r0, r7
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <_svfiprintf_r+0x1fc>)
 8002700:	a904      	add	r1, sp, #16
 8002702:	f3af 8000 	nop.w
 8002706:	1c42      	adds	r2, r0, #1
 8002708:	4606      	mov	r6, r0
 800270a:	d1d6      	bne.n	80026ba <_svfiprintf_r+0x176>
 800270c:	89ab      	ldrh	r3, [r5, #12]
 800270e:	065b      	lsls	r3, r3, #25
 8002710:	f53f af2c 	bmi.w	800256c <_svfiprintf_r+0x28>
 8002714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002716:	b01d      	add	sp, #116	; 0x74
 8002718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800271c:	ab03      	add	r3, sp, #12
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	462a      	mov	r2, r5
 8002722:	4638      	mov	r0, r7
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <_svfiprintf_r+0x1fc>)
 8002726:	a904      	add	r1, sp, #16
 8002728:	f000 f87c 	bl	8002824 <_printf_i>
 800272c:	e7eb      	b.n	8002706 <_svfiprintf_r+0x1c2>
 800272e:	bf00      	nop
 8002730:	08003094 	.word	0x08003094
 8002734:	0800309a 	.word	0x0800309a
 8002738:	0800309e 	.word	0x0800309e
 800273c:	00000000 	.word	0x00000000
 8002740:	0800248d 	.word	0x0800248d

08002744 <_printf_common>:
 8002744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002748:	4616      	mov	r6, r2
 800274a:	4699      	mov	r9, r3
 800274c:	688a      	ldr	r2, [r1, #8]
 800274e:	690b      	ldr	r3, [r1, #16]
 8002750:	4607      	mov	r7, r0
 8002752:	4293      	cmp	r3, r2
 8002754:	bfb8      	it	lt
 8002756:	4613      	movlt	r3, r2
 8002758:	6033      	str	r3, [r6, #0]
 800275a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800275e:	460c      	mov	r4, r1
 8002760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002764:	b10a      	cbz	r2, 800276a <_printf_common+0x26>
 8002766:	3301      	adds	r3, #1
 8002768:	6033      	str	r3, [r6, #0]
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	0699      	lsls	r1, r3, #26
 800276e:	bf42      	ittt	mi
 8002770:	6833      	ldrmi	r3, [r6, #0]
 8002772:	3302      	addmi	r3, #2
 8002774:	6033      	strmi	r3, [r6, #0]
 8002776:	6825      	ldr	r5, [r4, #0]
 8002778:	f015 0506 	ands.w	r5, r5, #6
 800277c:	d106      	bne.n	800278c <_printf_common+0x48>
 800277e:	f104 0a19 	add.w	sl, r4, #25
 8002782:	68e3      	ldr	r3, [r4, #12]
 8002784:	6832      	ldr	r2, [r6, #0]
 8002786:	1a9b      	subs	r3, r3, r2
 8002788:	42ab      	cmp	r3, r5
 800278a:	dc28      	bgt.n	80027de <_printf_common+0x9a>
 800278c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002790:	1e13      	subs	r3, r2, #0
 8002792:	6822      	ldr	r2, [r4, #0]
 8002794:	bf18      	it	ne
 8002796:	2301      	movne	r3, #1
 8002798:	0692      	lsls	r2, r2, #26
 800279a:	d42d      	bmi.n	80027f8 <_printf_common+0xb4>
 800279c:	4649      	mov	r1, r9
 800279e:	4638      	mov	r0, r7
 80027a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027a4:	47c0      	blx	r8
 80027a6:	3001      	adds	r0, #1
 80027a8:	d020      	beq.n	80027ec <_printf_common+0xa8>
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	68e5      	ldr	r5, [r4, #12]
 80027ae:	f003 0306 	and.w	r3, r3, #6
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf18      	it	ne
 80027b6:	2500      	movne	r5, #0
 80027b8:	6832      	ldr	r2, [r6, #0]
 80027ba:	f04f 0600 	mov.w	r6, #0
 80027be:	68a3      	ldr	r3, [r4, #8]
 80027c0:	bf08      	it	eq
 80027c2:	1aad      	subeq	r5, r5, r2
 80027c4:	6922      	ldr	r2, [r4, #16]
 80027c6:	bf08      	it	eq
 80027c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027cc:	4293      	cmp	r3, r2
 80027ce:	bfc4      	itt	gt
 80027d0:	1a9b      	subgt	r3, r3, r2
 80027d2:	18ed      	addgt	r5, r5, r3
 80027d4:	341a      	adds	r4, #26
 80027d6:	42b5      	cmp	r5, r6
 80027d8:	d11a      	bne.n	8002810 <_printf_common+0xcc>
 80027da:	2000      	movs	r0, #0
 80027dc:	e008      	b.n	80027f0 <_printf_common+0xac>
 80027de:	2301      	movs	r3, #1
 80027e0:	4652      	mov	r2, sl
 80027e2:	4649      	mov	r1, r9
 80027e4:	4638      	mov	r0, r7
 80027e6:	47c0      	blx	r8
 80027e8:	3001      	adds	r0, #1
 80027ea:	d103      	bne.n	80027f4 <_printf_common+0xb0>
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295
 80027f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027f4:	3501      	adds	r5, #1
 80027f6:	e7c4      	b.n	8002782 <_printf_common+0x3e>
 80027f8:	2030      	movs	r0, #48	; 0x30
 80027fa:	18e1      	adds	r1, r4, r3
 80027fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002806:	4422      	add	r2, r4
 8002808:	3302      	adds	r3, #2
 800280a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800280e:	e7c5      	b.n	800279c <_printf_common+0x58>
 8002810:	2301      	movs	r3, #1
 8002812:	4622      	mov	r2, r4
 8002814:	4649      	mov	r1, r9
 8002816:	4638      	mov	r0, r7
 8002818:	47c0      	blx	r8
 800281a:	3001      	adds	r0, #1
 800281c:	d0e6      	beq.n	80027ec <_printf_common+0xa8>
 800281e:	3601      	adds	r6, #1
 8002820:	e7d9      	b.n	80027d6 <_printf_common+0x92>
	...

08002824 <_printf_i>:
 8002824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002828:	7e0f      	ldrb	r7, [r1, #24]
 800282a:	4691      	mov	r9, r2
 800282c:	2f78      	cmp	r7, #120	; 0x78
 800282e:	4680      	mov	r8, r0
 8002830:	460c      	mov	r4, r1
 8002832:	469a      	mov	sl, r3
 8002834:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002836:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800283a:	d807      	bhi.n	800284c <_printf_i+0x28>
 800283c:	2f62      	cmp	r7, #98	; 0x62
 800283e:	d80a      	bhi.n	8002856 <_printf_i+0x32>
 8002840:	2f00      	cmp	r7, #0
 8002842:	f000 80d9 	beq.w	80029f8 <_printf_i+0x1d4>
 8002846:	2f58      	cmp	r7, #88	; 0x58
 8002848:	f000 80a4 	beq.w	8002994 <_printf_i+0x170>
 800284c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002850:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002854:	e03a      	b.n	80028cc <_printf_i+0xa8>
 8002856:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800285a:	2b15      	cmp	r3, #21
 800285c:	d8f6      	bhi.n	800284c <_printf_i+0x28>
 800285e:	a101      	add	r1, pc, #4	; (adr r1, 8002864 <_printf_i+0x40>)
 8002860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002864:	080028bd 	.word	0x080028bd
 8002868:	080028d1 	.word	0x080028d1
 800286c:	0800284d 	.word	0x0800284d
 8002870:	0800284d 	.word	0x0800284d
 8002874:	0800284d 	.word	0x0800284d
 8002878:	0800284d 	.word	0x0800284d
 800287c:	080028d1 	.word	0x080028d1
 8002880:	0800284d 	.word	0x0800284d
 8002884:	0800284d 	.word	0x0800284d
 8002888:	0800284d 	.word	0x0800284d
 800288c:	0800284d 	.word	0x0800284d
 8002890:	080029df 	.word	0x080029df
 8002894:	08002901 	.word	0x08002901
 8002898:	080029c1 	.word	0x080029c1
 800289c:	0800284d 	.word	0x0800284d
 80028a0:	0800284d 	.word	0x0800284d
 80028a4:	08002a01 	.word	0x08002a01
 80028a8:	0800284d 	.word	0x0800284d
 80028ac:	08002901 	.word	0x08002901
 80028b0:	0800284d 	.word	0x0800284d
 80028b4:	0800284d 	.word	0x0800284d
 80028b8:	080029c9 	.word	0x080029c9
 80028bc:	682b      	ldr	r3, [r5, #0]
 80028be:	1d1a      	adds	r2, r3, #4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	602a      	str	r2, [r5, #0]
 80028c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0a4      	b.n	8002a1a <_printf_i+0x1f6>
 80028d0:	6820      	ldr	r0, [r4, #0]
 80028d2:	6829      	ldr	r1, [r5, #0]
 80028d4:	0606      	lsls	r6, r0, #24
 80028d6:	f101 0304 	add.w	r3, r1, #4
 80028da:	d50a      	bpl.n	80028f2 <_printf_i+0xce>
 80028dc:	680e      	ldr	r6, [r1, #0]
 80028de:	602b      	str	r3, [r5, #0]
 80028e0:	2e00      	cmp	r6, #0
 80028e2:	da03      	bge.n	80028ec <_printf_i+0xc8>
 80028e4:	232d      	movs	r3, #45	; 0x2d
 80028e6:	4276      	negs	r6, r6
 80028e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028ec:	230a      	movs	r3, #10
 80028ee:	485e      	ldr	r0, [pc, #376]	; (8002a68 <_printf_i+0x244>)
 80028f0:	e019      	b.n	8002926 <_printf_i+0x102>
 80028f2:	680e      	ldr	r6, [r1, #0]
 80028f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028f8:	602b      	str	r3, [r5, #0]
 80028fa:	bf18      	it	ne
 80028fc:	b236      	sxthne	r6, r6
 80028fe:	e7ef      	b.n	80028e0 <_printf_i+0xbc>
 8002900:	682b      	ldr	r3, [r5, #0]
 8002902:	6820      	ldr	r0, [r4, #0]
 8002904:	1d19      	adds	r1, r3, #4
 8002906:	6029      	str	r1, [r5, #0]
 8002908:	0601      	lsls	r1, r0, #24
 800290a:	d501      	bpl.n	8002910 <_printf_i+0xec>
 800290c:	681e      	ldr	r6, [r3, #0]
 800290e:	e002      	b.n	8002916 <_printf_i+0xf2>
 8002910:	0646      	lsls	r6, r0, #25
 8002912:	d5fb      	bpl.n	800290c <_printf_i+0xe8>
 8002914:	881e      	ldrh	r6, [r3, #0]
 8002916:	2f6f      	cmp	r7, #111	; 0x6f
 8002918:	bf0c      	ite	eq
 800291a:	2308      	moveq	r3, #8
 800291c:	230a      	movne	r3, #10
 800291e:	4852      	ldr	r0, [pc, #328]	; (8002a68 <_printf_i+0x244>)
 8002920:	2100      	movs	r1, #0
 8002922:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002926:	6865      	ldr	r5, [r4, #4]
 8002928:	2d00      	cmp	r5, #0
 800292a:	bfa8      	it	ge
 800292c:	6821      	ldrge	r1, [r4, #0]
 800292e:	60a5      	str	r5, [r4, #8]
 8002930:	bfa4      	itt	ge
 8002932:	f021 0104 	bicge.w	r1, r1, #4
 8002936:	6021      	strge	r1, [r4, #0]
 8002938:	b90e      	cbnz	r6, 800293e <_printf_i+0x11a>
 800293a:	2d00      	cmp	r5, #0
 800293c:	d04d      	beq.n	80029da <_printf_i+0x1b6>
 800293e:	4615      	mov	r5, r2
 8002940:	fbb6 f1f3 	udiv	r1, r6, r3
 8002944:	fb03 6711 	mls	r7, r3, r1, r6
 8002948:	5dc7      	ldrb	r7, [r0, r7]
 800294a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800294e:	4637      	mov	r7, r6
 8002950:	42bb      	cmp	r3, r7
 8002952:	460e      	mov	r6, r1
 8002954:	d9f4      	bls.n	8002940 <_printf_i+0x11c>
 8002956:	2b08      	cmp	r3, #8
 8002958:	d10b      	bne.n	8002972 <_printf_i+0x14e>
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	07de      	lsls	r6, r3, #31
 800295e:	d508      	bpl.n	8002972 <_printf_i+0x14e>
 8002960:	6923      	ldr	r3, [r4, #16]
 8002962:	6861      	ldr	r1, [r4, #4]
 8002964:	4299      	cmp	r1, r3
 8002966:	bfde      	ittt	le
 8002968:	2330      	movle	r3, #48	; 0x30
 800296a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800296e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002972:	1b52      	subs	r2, r2, r5
 8002974:	6122      	str	r2, [r4, #16]
 8002976:	464b      	mov	r3, r9
 8002978:	4621      	mov	r1, r4
 800297a:	4640      	mov	r0, r8
 800297c:	f8cd a000 	str.w	sl, [sp]
 8002980:	aa03      	add	r2, sp, #12
 8002982:	f7ff fedf 	bl	8002744 <_printf_common>
 8002986:	3001      	adds	r0, #1
 8002988:	d14c      	bne.n	8002a24 <_printf_i+0x200>
 800298a:	f04f 30ff 	mov.w	r0, #4294967295
 800298e:	b004      	add	sp, #16
 8002990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002994:	4834      	ldr	r0, [pc, #208]	; (8002a68 <_printf_i+0x244>)
 8002996:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800299a:	6829      	ldr	r1, [r5, #0]
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	f851 6b04 	ldr.w	r6, [r1], #4
 80029a2:	6029      	str	r1, [r5, #0]
 80029a4:	061d      	lsls	r5, r3, #24
 80029a6:	d514      	bpl.n	80029d2 <_printf_i+0x1ae>
 80029a8:	07df      	lsls	r7, r3, #31
 80029aa:	bf44      	itt	mi
 80029ac:	f043 0320 	orrmi.w	r3, r3, #32
 80029b0:	6023      	strmi	r3, [r4, #0]
 80029b2:	b91e      	cbnz	r6, 80029bc <_printf_i+0x198>
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	f023 0320 	bic.w	r3, r3, #32
 80029ba:	6023      	str	r3, [r4, #0]
 80029bc:	2310      	movs	r3, #16
 80029be:	e7af      	b.n	8002920 <_printf_i+0xfc>
 80029c0:	6823      	ldr	r3, [r4, #0]
 80029c2:	f043 0320 	orr.w	r3, r3, #32
 80029c6:	6023      	str	r3, [r4, #0]
 80029c8:	2378      	movs	r3, #120	; 0x78
 80029ca:	4828      	ldr	r0, [pc, #160]	; (8002a6c <_printf_i+0x248>)
 80029cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80029d0:	e7e3      	b.n	800299a <_printf_i+0x176>
 80029d2:	0659      	lsls	r1, r3, #25
 80029d4:	bf48      	it	mi
 80029d6:	b2b6      	uxthmi	r6, r6
 80029d8:	e7e6      	b.n	80029a8 <_printf_i+0x184>
 80029da:	4615      	mov	r5, r2
 80029dc:	e7bb      	b.n	8002956 <_printf_i+0x132>
 80029de:	682b      	ldr	r3, [r5, #0]
 80029e0:	6826      	ldr	r6, [r4, #0]
 80029e2:	1d18      	adds	r0, r3, #4
 80029e4:	6961      	ldr	r1, [r4, #20]
 80029e6:	6028      	str	r0, [r5, #0]
 80029e8:	0635      	lsls	r5, r6, #24
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	d501      	bpl.n	80029f2 <_printf_i+0x1ce>
 80029ee:	6019      	str	r1, [r3, #0]
 80029f0:	e002      	b.n	80029f8 <_printf_i+0x1d4>
 80029f2:	0670      	lsls	r0, r6, #25
 80029f4:	d5fb      	bpl.n	80029ee <_printf_i+0x1ca>
 80029f6:	8019      	strh	r1, [r3, #0]
 80029f8:	2300      	movs	r3, #0
 80029fa:	4615      	mov	r5, r2
 80029fc:	6123      	str	r3, [r4, #16]
 80029fe:	e7ba      	b.n	8002976 <_printf_i+0x152>
 8002a00:	682b      	ldr	r3, [r5, #0]
 8002a02:	2100      	movs	r1, #0
 8002a04:	1d1a      	adds	r2, r3, #4
 8002a06:	602a      	str	r2, [r5, #0]
 8002a08:	681d      	ldr	r5, [r3, #0]
 8002a0a:	6862      	ldr	r2, [r4, #4]
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	f000 f82f 	bl	8002a70 <memchr>
 8002a12:	b108      	cbz	r0, 8002a18 <_printf_i+0x1f4>
 8002a14:	1b40      	subs	r0, r0, r5
 8002a16:	6060      	str	r0, [r4, #4]
 8002a18:	6863      	ldr	r3, [r4, #4]
 8002a1a:	6123      	str	r3, [r4, #16]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a22:	e7a8      	b.n	8002976 <_printf_i+0x152>
 8002a24:	462a      	mov	r2, r5
 8002a26:	4649      	mov	r1, r9
 8002a28:	4640      	mov	r0, r8
 8002a2a:	6923      	ldr	r3, [r4, #16]
 8002a2c:	47d0      	blx	sl
 8002a2e:	3001      	adds	r0, #1
 8002a30:	d0ab      	beq.n	800298a <_printf_i+0x166>
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	079b      	lsls	r3, r3, #30
 8002a36:	d413      	bmi.n	8002a60 <_printf_i+0x23c>
 8002a38:	68e0      	ldr	r0, [r4, #12]
 8002a3a:	9b03      	ldr	r3, [sp, #12]
 8002a3c:	4298      	cmp	r0, r3
 8002a3e:	bfb8      	it	lt
 8002a40:	4618      	movlt	r0, r3
 8002a42:	e7a4      	b.n	800298e <_printf_i+0x16a>
 8002a44:	2301      	movs	r3, #1
 8002a46:	4632      	mov	r2, r6
 8002a48:	4649      	mov	r1, r9
 8002a4a:	4640      	mov	r0, r8
 8002a4c:	47d0      	blx	sl
 8002a4e:	3001      	adds	r0, #1
 8002a50:	d09b      	beq.n	800298a <_printf_i+0x166>
 8002a52:	3501      	adds	r5, #1
 8002a54:	68e3      	ldr	r3, [r4, #12]
 8002a56:	9903      	ldr	r1, [sp, #12]
 8002a58:	1a5b      	subs	r3, r3, r1
 8002a5a:	42ab      	cmp	r3, r5
 8002a5c:	dcf2      	bgt.n	8002a44 <_printf_i+0x220>
 8002a5e:	e7eb      	b.n	8002a38 <_printf_i+0x214>
 8002a60:	2500      	movs	r5, #0
 8002a62:	f104 0619 	add.w	r6, r4, #25
 8002a66:	e7f5      	b.n	8002a54 <_printf_i+0x230>
 8002a68:	080030a5 	.word	0x080030a5
 8002a6c:	080030b6 	.word	0x080030b6

08002a70 <memchr>:
 8002a70:	4603      	mov	r3, r0
 8002a72:	b510      	push	{r4, lr}
 8002a74:	b2c9      	uxtb	r1, r1
 8002a76:	4402      	add	r2, r0
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	d101      	bne.n	8002a82 <memchr+0x12>
 8002a7e:	2000      	movs	r0, #0
 8002a80:	e003      	b.n	8002a8a <memchr+0x1a>
 8002a82:	7804      	ldrb	r4, [r0, #0]
 8002a84:	3301      	adds	r3, #1
 8002a86:	428c      	cmp	r4, r1
 8002a88:	d1f6      	bne.n	8002a78 <memchr+0x8>
 8002a8a:	bd10      	pop	{r4, pc}

08002a8c <memcpy>:
 8002a8c:	440a      	add	r2, r1
 8002a8e:	4291      	cmp	r1, r2
 8002a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a94:	d100      	bne.n	8002a98 <memcpy+0xc>
 8002a96:	4770      	bx	lr
 8002a98:	b510      	push	{r4, lr}
 8002a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a9e:	4291      	cmp	r1, r2
 8002aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002aa4:	d1f9      	bne.n	8002a9a <memcpy+0xe>
 8002aa6:	bd10      	pop	{r4, pc}

08002aa8 <memmove>:
 8002aa8:	4288      	cmp	r0, r1
 8002aaa:	b510      	push	{r4, lr}
 8002aac:	eb01 0402 	add.w	r4, r1, r2
 8002ab0:	d902      	bls.n	8002ab8 <memmove+0x10>
 8002ab2:	4284      	cmp	r4, r0
 8002ab4:	4623      	mov	r3, r4
 8002ab6:	d807      	bhi.n	8002ac8 <memmove+0x20>
 8002ab8:	1e43      	subs	r3, r0, #1
 8002aba:	42a1      	cmp	r1, r4
 8002abc:	d008      	beq.n	8002ad0 <memmove+0x28>
 8002abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ac6:	e7f8      	b.n	8002aba <memmove+0x12>
 8002ac8:	4601      	mov	r1, r0
 8002aca:	4402      	add	r2, r0
 8002acc:	428a      	cmp	r2, r1
 8002ace:	d100      	bne.n	8002ad2 <memmove+0x2a>
 8002ad0:	bd10      	pop	{r4, pc}
 8002ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ada:	e7f7      	b.n	8002acc <memmove+0x24>

08002adc <_free_r>:
 8002adc:	b538      	push	{r3, r4, r5, lr}
 8002ade:	4605      	mov	r5, r0
 8002ae0:	2900      	cmp	r1, #0
 8002ae2:	d040      	beq.n	8002b66 <_free_r+0x8a>
 8002ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ae8:	1f0c      	subs	r4, r1, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bfb8      	it	lt
 8002aee:	18e4      	addlt	r4, r4, r3
 8002af0:	f000 f910 	bl	8002d14 <__malloc_lock>
 8002af4:	4a1c      	ldr	r2, [pc, #112]	; (8002b68 <_free_r+0x8c>)
 8002af6:	6813      	ldr	r3, [r2, #0]
 8002af8:	b933      	cbnz	r3, 8002b08 <_free_r+0x2c>
 8002afa:	6063      	str	r3, [r4, #4]
 8002afc:	6014      	str	r4, [r2, #0]
 8002afe:	4628      	mov	r0, r5
 8002b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b04:	f000 b90c 	b.w	8002d20 <__malloc_unlock>
 8002b08:	42a3      	cmp	r3, r4
 8002b0a:	d908      	bls.n	8002b1e <_free_r+0x42>
 8002b0c:	6820      	ldr	r0, [r4, #0]
 8002b0e:	1821      	adds	r1, r4, r0
 8002b10:	428b      	cmp	r3, r1
 8002b12:	bf01      	itttt	eq
 8002b14:	6819      	ldreq	r1, [r3, #0]
 8002b16:	685b      	ldreq	r3, [r3, #4]
 8002b18:	1809      	addeq	r1, r1, r0
 8002b1a:	6021      	streq	r1, [r4, #0]
 8002b1c:	e7ed      	b.n	8002afa <_free_r+0x1e>
 8002b1e:	461a      	mov	r2, r3
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	b10b      	cbz	r3, 8002b28 <_free_r+0x4c>
 8002b24:	42a3      	cmp	r3, r4
 8002b26:	d9fa      	bls.n	8002b1e <_free_r+0x42>
 8002b28:	6811      	ldr	r1, [r2, #0]
 8002b2a:	1850      	adds	r0, r2, r1
 8002b2c:	42a0      	cmp	r0, r4
 8002b2e:	d10b      	bne.n	8002b48 <_free_r+0x6c>
 8002b30:	6820      	ldr	r0, [r4, #0]
 8002b32:	4401      	add	r1, r0
 8002b34:	1850      	adds	r0, r2, r1
 8002b36:	4283      	cmp	r3, r0
 8002b38:	6011      	str	r1, [r2, #0]
 8002b3a:	d1e0      	bne.n	8002afe <_free_r+0x22>
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4401      	add	r1, r0
 8002b42:	6011      	str	r1, [r2, #0]
 8002b44:	6053      	str	r3, [r2, #4]
 8002b46:	e7da      	b.n	8002afe <_free_r+0x22>
 8002b48:	d902      	bls.n	8002b50 <_free_r+0x74>
 8002b4a:	230c      	movs	r3, #12
 8002b4c:	602b      	str	r3, [r5, #0]
 8002b4e:	e7d6      	b.n	8002afe <_free_r+0x22>
 8002b50:	6820      	ldr	r0, [r4, #0]
 8002b52:	1821      	adds	r1, r4, r0
 8002b54:	428b      	cmp	r3, r1
 8002b56:	bf01      	itttt	eq
 8002b58:	6819      	ldreq	r1, [r3, #0]
 8002b5a:	685b      	ldreq	r3, [r3, #4]
 8002b5c:	1809      	addeq	r1, r1, r0
 8002b5e:	6021      	streq	r1, [r4, #0]
 8002b60:	6063      	str	r3, [r4, #4]
 8002b62:	6054      	str	r4, [r2, #4]
 8002b64:	e7cb      	b.n	8002afe <_free_r+0x22>
 8002b66:	bd38      	pop	{r3, r4, r5, pc}
 8002b68:	200001a8 	.word	0x200001a8

08002b6c <sbrk_aligned>:
 8002b6c:	b570      	push	{r4, r5, r6, lr}
 8002b6e:	4e0e      	ldr	r6, [pc, #56]	; (8002ba8 <sbrk_aligned+0x3c>)
 8002b70:	460c      	mov	r4, r1
 8002b72:	6831      	ldr	r1, [r6, #0]
 8002b74:	4605      	mov	r5, r0
 8002b76:	b911      	cbnz	r1, 8002b7e <sbrk_aligned+0x12>
 8002b78:	f000 f8bc 	bl	8002cf4 <_sbrk_r>
 8002b7c:	6030      	str	r0, [r6, #0]
 8002b7e:	4621      	mov	r1, r4
 8002b80:	4628      	mov	r0, r5
 8002b82:	f000 f8b7 	bl	8002cf4 <_sbrk_r>
 8002b86:	1c43      	adds	r3, r0, #1
 8002b88:	d00a      	beq.n	8002ba0 <sbrk_aligned+0x34>
 8002b8a:	1cc4      	adds	r4, r0, #3
 8002b8c:	f024 0403 	bic.w	r4, r4, #3
 8002b90:	42a0      	cmp	r0, r4
 8002b92:	d007      	beq.n	8002ba4 <sbrk_aligned+0x38>
 8002b94:	1a21      	subs	r1, r4, r0
 8002b96:	4628      	mov	r0, r5
 8002b98:	f000 f8ac 	bl	8002cf4 <_sbrk_r>
 8002b9c:	3001      	adds	r0, #1
 8002b9e:	d101      	bne.n	8002ba4 <sbrk_aligned+0x38>
 8002ba0:	f04f 34ff 	mov.w	r4, #4294967295
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	200001ac 	.word	0x200001ac

08002bac <_malloc_r>:
 8002bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb0:	1ccd      	adds	r5, r1, #3
 8002bb2:	f025 0503 	bic.w	r5, r5, #3
 8002bb6:	3508      	adds	r5, #8
 8002bb8:	2d0c      	cmp	r5, #12
 8002bba:	bf38      	it	cc
 8002bbc:	250c      	movcc	r5, #12
 8002bbe:	2d00      	cmp	r5, #0
 8002bc0:	4607      	mov	r7, r0
 8002bc2:	db01      	blt.n	8002bc8 <_malloc_r+0x1c>
 8002bc4:	42a9      	cmp	r1, r5
 8002bc6:	d905      	bls.n	8002bd4 <_malloc_r+0x28>
 8002bc8:	230c      	movs	r3, #12
 8002bca:	2600      	movs	r6, #0
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	4630      	mov	r0, r6
 8002bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bd4:	4e2e      	ldr	r6, [pc, #184]	; (8002c90 <_malloc_r+0xe4>)
 8002bd6:	f000 f89d 	bl	8002d14 <__malloc_lock>
 8002bda:	6833      	ldr	r3, [r6, #0]
 8002bdc:	461c      	mov	r4, r3
 8002bde:	bb34      	cbnz	r4, 8002c2e <_malloc_r+0x82>
 8002be0:	4629      	mov	r1, r5
 8002be2:	4638      	mov	r0, r7
 8002be4:	f7ff ffc2 	bl	8002b6c <sbrk_aligned>
 8002be8:	1c43      	adds	r3, r0, #1
 8002bea:	4604      	mov	r4, r0
 8002bec:	d14d      	bne.n	8002c8a <_malloc_r+0xde>
 8002bee:	6834      	ldr	r4, [r6, #0]
 8002bf0:	4626      	mov	r6, r4
 8002bf2:	2e00      	cmp	r6, #0
 8002bf4:	d140      	bne.n	8002c78 <_malloc_r+0xcc>
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	4631      	mov	r1, r6
 8002bfa:	4638      	mov	r0, r7
 8002bfc:	eb04 0803 	add.w	r8, r4, r3
 8002c00:	f000 f878 	bl	8002cf4 <_sbrk_r>
 8002c04:	4580      	cmp	r8, r0
 8002c06:	d13a      	bne.n	8002c7e <_malloc_r+0xd2>
 8002c08:	6821      	ldr	r1, [r4, #0]
 8002c0a:	3503      	adds	r5, #3
 8002c0c:	1a6d      	subs	r5, r5, r1
 8002c0e:	f025 0503 	bic.w	r5, r5, #3
 8002c12:	3508      	adds	r5, #8
 8002c14:	2d0c      	cmp	r5, #12
 8002c16:	bf38      	it	cc
 8002c18:	250c      	movcc	r5, #12
 8002c1a:	4638      	mov	r0, r7
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f7ff ffa5 	bl	8002b6c <sbrk_aligned>
 8002c22:	3001      	adds	r0, #1
 8002c24:	d02b      	beq.n	8002c7e <_malloc_r+0xd2>
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	442b      	add	r3, r5
 8002c2a:	6023      	str	r3, [r4, #0]
 8002c2c:	e00e      	b.n	8002c4c <_malloc_r+0xa0>
 8002c2e:	6822      	ldr	r2, [r4, #0]
 8002c30:	1b52      	subs	r2, r2, r5
 8002c32:	d41e      	bmi.n	8002c72 <_malloc_r+0xc6>
 8002c34:	2a0b      	cmp	r2, #11
 8002c36:	d916      	bls.n	8002c66 <_malloc_r+0xba>
 8002c38:	1961      	adds	r1, r4, r5
 8002c3a:	42a3      	cmp	r3, r4
 8002c3c:	6025      	str	r5, [r4, #0]
 8002c3e:	bf18      	it	ne
 8002c40:	6059      	strne	r1, [r3, #4]
 8002c42:	6863      	ldr	r3, [r4, #4]
 8002c44:	bf08      	it	eq
 8002c46:	6031      	streq	r1, [r6, #0]
 8002c48:	5162      	str	r2, [r4, r5]
 8002c4a:	604b      	str	r3, [r1, #4]
 8002c4c:	4638      	mov	r0, r7
 8002c4e:	f104 060b 	add.w	r6, r4, #11
 8002c52:	f000 f865 	bl	8002d20 <__malloc_unlock>
 8002c56:	f026 0607 	bic.w	r6, r6, #7
 8002c5a:	1d23      	adds	r3, r4, #4
 8002c5c:	1af2      	subs	r2, r6, r3
 8002c5e:	d0b6      	beq.n	8002bce <_malloc_r+0x22>
 8002c60:	1b9b      	subs	r3, r3, r6
 8002c62:	50a3      	str	r3, [r4, r2]
 8002c64:	e7b3      	b.n	8002bce <_malloc_r+0x22>
 8002c66:	6862      	ldr	r2, [r4, #4]
 8002c68:	42a3      	cmp	r3, r4
 8002c6a:	bf0c      	ite	eq
 8002c6c:	6032      	streq	r2, [r6, #0]
 8002c6e:	605a      	strne	r2, [r3, #4]
 8002c70:	e7ec      	b.n	8002c4c <_malloc_r+0xa0>
 8002c72:	4623      	mov	r3, r4
 8002c74:	6864      	ldr	r4, [r4, #4]
 8002c76:	e7b2      	b.n	8002bde <_malloc_r+0x32>
 8002c78:	4634      	mov	r4, r6
 8002c7a:	6876      	ldr	r6, [r6, #4]
 8002c7c:	e7b9      	b.n	8002bf2 <_malloc_r+0x46>
 8002c7e:	230c      	movs	r3, #12
 8002c80:	4638      	mov	r0, r7
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	f000 f84c 	bl	8002d20 <__malloc_unlock>
 8002c88:	e7a1      	b.n	8002bce <_malloc_r+0x22>
 8002c8a:	6025      	str	r5, [r4, #0]
 8002c8c:	e7de      	b.n	8002c4c <_malloc_r+0xa0>
 8002c8e:	bf00      	nop
 8002c90:	200001a8 	.word	0x200001a8

08002c94 <_realloc_r>:
 8002c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c98:	4680      	mov	r8, r0
 8002c9a:	4614      	mov	r4, r2
 8002c9c:	460e      	mov	r6, r1
 8002c9e:	b921      	cbnz	r1, 8002caa <_realloc_r+0x16>
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ca6:	f7ff bf81 	b.w	8002bac <_malloc_r>
 8002caa:	b92a      	cbnz	r2, 8002cb8 <_realloc_r+0x24>
 8002cac:	f7ff ff16 	bl	8002adc <_free_r>
 8002cb0:	4625      	mov	r5, r4
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cb8:	f000 f838 	bl	8002d2c <_malloc_usable_size_r>
 8002cbc:	4284      	cmp	r4, r0
 8002cbe:	4607      	mov	r7, r0
 8002cc0:	d802      	bhi.n	8002cc8 <_realloc_r+0x34>
 8002cc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002cc6:	d812      	bhi.n	8002cee <_realloc_r+0x5a>
 8002cc8:	4621      	mov	r1, r4
 8002cca:	4640      	mov	r0, r8
 8002ccc:	f7ff ff6e 	bl	8002bac <_malloc_r>
 8002cd0:	4605      	mov	r5, r0
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d0ed      	beq.n	8002cb2 <_realloc_r+0x1e>
 8002cd6:	42bc      	cmp	r4, r7
 8002cd8:	4622      	mov	r2, r4
 8002cda:	4631      	mov	r1, r6
 8002cdc:	bf28      	it	cs
 8002cde:	463a      	movcs	r2, r7
 8002ce0:	f7ff fed4 	bl	8002a8c <memcpy>
 8002ce4:	4631      	mov	r1, r6
 8002ce6:	4640      	mov	r0, r8
 8002ce8:	f7ff fef8 	bl	8002adc <_free_r>
 8002cec:	e7e1      	b.n	8002cb2 <_realloc_r+0x1e>
 8002cee:	4635      	mov	r5, r6
 8002cf0:	e7df      	b.n	8002cb2 <_realloc_r+0x1e>
	...

08002cf4 <_sbrk_r>:
 8002cf4:	b538      	push	{r3, r4, r5, lr}
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	4d05      	ldr	r5, [pc, #20]	; (8002d10 <_sbrk_r+0x1c>)
 8002cfa:	4604      	mov	r4, r0
 8002cfc:	4608      	mov	r0, r1
 8002cfe:	602b      	str	r3, [r5, #0]
 8002d00:	f7fd ffa8 	bl	8000c54 <_sbrk>
 8002d04:	1c43      	adds	r3, r0, #1
 8002d06:	d102      	bne.n	8002d0e <_sbrk_r+0x1a>
 8002d08:	682b      	ldr	r3, [r5, #0]
 8002d0a:	b103      	cbz	r3, 8002d0e <_sbrk_r+0x1a>
 8002d0c:	6023      	str	r3, [r4, #0]
 8002d0e:	bd38      	pop	{r3, r4, r5, pc}
 8002d10:	200001b0 	.word	0x200001b0

08002d14 <__malloc_lock>:
 8002d14:	4801      	ldr	r0, [pc, #4]	; (8002d1c <__malloc_lock+0x8>)
 8002d16:	f000 b811 	b.w	8002d3c <__retarget_lock_acquire_recursive>
 8002d1a:	bf00      	nop
 8002d1c:	200001b4 	.word	0x200001b4

08002d20 <__malloc_unlock>:
 8002d20:	4801      	ldr	r0, [pc, #4]	; (8002d28 <__malloc_unlock+0x8>)
 8002d22:	f000 b80c 	b.w	8002d3e <__retarget_lock_release_recursive>
 8002d26:	bf00      	nop
 8002d28:	200001b4 	.word	0x200001b4

08002d2c <_malloc_usable_size_r>:
 8002d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d30:	1f18      	subs	r0, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bfbc      	itt	lt
 8002d36:	580b      	ldrlt	r3, [r1, r0]
 8002d38:	18c0      	addlt	r0, r0, r3
 8002d3a:	4770      	bx	lr

08002d3c <__retarget_lock_acquire_recursive>:
 8002d3c:	4770      	bx	lr

08002d3e <__retarget_lock_release_recursive>:
 8002d3e:	4770      	bx	lr

08002d40 <_init>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	bf00      	nop
 8002d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d46:	bc08      	pop	{r3}
 8002d48:	469e      	mov	lr, r3
 8002d4a:	4770      	bx	lr

08002d4c <_fini>:
 8002d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4e:	bf00      	nop
 8002d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d52:	bc08      	pop	{r3}
 8002d54:	469e      	mov	lr, r3
 8002d56:	4770      	bx	lr
